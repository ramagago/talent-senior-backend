
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Person
 * 
 */
export type Person = $Result.DefaultSelection<Prisma.$PersonPayload>
/**
 * Model Language
 * 
 */
export type Language = $Result.DefaultSelection<Prisma.$LanguagePayload>
/**
 * Model Reference
 * 
 */
export type Reference = $Result.DefaultSelection<Prisma.$ReferencePayload>
/**
 * Model Study
 * 
 */
export type Study = $Result.DefaultSelection<Prisma.$StudyPayload>
/**
 * Model WorkExperience
 * 
 */
export type WorkExperience = $Result.DefaultSelection<Prisma.$WorkExperiencePayload>
/**
 * Model Companies
 * 
 */
export type Companies = $Result.DefaultSelection<Prisma.$CompaniesPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more People
 * const people = await prisma.person.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more People
   * const people = await prisma.person.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.person`: Exposes CRUD operations for the **Person** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more People
    * const people = await prisma.person.findMany()
    * ```
    */
  get person(): Prisma.PersonDelegate<ExtArgs>;

  /**
   * `prisma.language`: Exposes CRUD operations for the **Language** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Languages
    * const languages = await prisma.language.findMany()
    * ```
    */
  get language(): Prisma.LanguageDelegate<ExtArgs>;

  /**
   * `prisma.reference`: Exposes CRUD operations for the **Reference** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more References
    * const references = await prisma.reference.findMany()
    * ```
    */
  get reference(): Prisma.ReferenceDelegate<ExtArgs>;

  /**
   * `prisma.study`: Exposes CRUD operations for the **Study** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Studies
    * const studies = await prisma.study.findMany()
    * ```
    */
  get study(): Prisma.StudyDelegate<ExtArgs>;

  /**
   * `prisma.workExperience`: Exposes CRUD operations for the **WorkExperience** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkExperiences
    * const workExperiences = await prisma.workExperience.findMany()
    * ```
    */
  get workExperience(): Prisma.WorkExperienceDelegate<ExtArgs>;

  /**
   * `prisma.companies`: Exposes CRUD operations for the **Companies** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Companies
    * const companies = await prisma.companies.findMany()
    * ```
    */
  get companies(): Prisma.CompaniesDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.12.0
   * Query Engine version: 473ed3124229e22d881cb7addf559799debae1ab
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Person: 'Person',
    Language: 'Language',
    Reference: 'Reference',
    Study: 'Study',
    WorkExperience: 'WorkExperience',
    Companies: 'Companies'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'person' | 'language' | 'reference' | 'study' | 'workExperience' | 'companies'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Person: {
        payload: Prisma.$PersonPayload<ExtArgs>
        fields: Prisma.PersonFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PersonFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PersonPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PersonFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>
          }
          findFirst: {
            args: Prisma.PersonFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PersonPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PersonFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>
          }
          findMany: {
            args: Prisma.PersonFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>[]
          }
          create: {
            args: Prisma.PersonCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>
          }
          createMany: {
            args: Prisma.PersonCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PersonDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>
          }
          update: {
            args: Prisma.PersonUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>
          }
          deleteMany: {
            args: Prisma.PersonDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PersonUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PersonUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>
          }
          aggregate: {
            args: Prisma.PersonAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePerson>
          }
          groupBy: {
            args: Prisma.PersonGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PersonGroupByOutputType>[]
          }
          count: {
            args: Prisma.PersonCountArgs<ExtArgs>,
            result: $Utils.Optional<PersonCountAggregateOutputType> | number
          }
        }
      }
      Language: {
        payload: Prisma.$LanguagePayload<ExtArgs>
        fields: Prisma.LanguageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LanguageFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LanguagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LanguageFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LanguagePayload>
          }
          findFirst: {
            args: Prisma.LanguageFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LanguagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LanguageFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LanguagePayload>
          }
          findMany: {
            args: Prisma.LanguageFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LanguagePayload>[]
          }
          create: {
            args: Prisma.LanguageCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LanguagePayload>
          }
          createMany: {
            args: Prisma.LanguageCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.LanguageDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LanguagePayload>
          }
          update: {
            args: Prisma.LanguageUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LanguagePayload>
          }
          deleteMany: {
            args: Prisma.LanguageDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.LanguageUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.LanguageUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LanguagePayload>
          }
          aggregate: {
            args: Prisma.LanguageAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLanguage>
          }
          groupBy: {
            args: Prisma.LanguageGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LanguageGroupByOutputType>[]
          }
          count: {
            args: Prisma.LanguageCountArgs<ExtArgs>,
            result: $Utils.Optional<LanguageCountAggregateOutputType> | number
          }
        }
      }
      Reference: {
        payload: Prisma.$ReferencePayload<ExtArgs>
        fields: Prisma.ReferenceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReferenceFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReferencePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReferenceFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReferencePayload>
          }
          findFirst: {
            args: Prisma.ReferenceFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReferencePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReferenceFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReferencePayload>
          }
          findMany: {
            args: Prisma.ReferenceFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReferencePayload>[]
          }
          create: {
            args: Prisma.ReferenceCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReferencePayload>
          }
          createMany: {
            args: Prisma.ReferenceCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ReferenceDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReferencePayload>
          }
          update: {
            args: Prisma.ReferenceUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReferencePayload>
          }
          deleteMany: {
            args: Prisma.ReferenceDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ReferenceUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ReferenceUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReferencePayload>
          }
          aggregate: {
            args: Prisma.ReferenceAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateReference>
          }
          groupBy: {
            args: Prisma.ReferenceGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ReferenceGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReferenceCountArgs<ExtArgs>,
            result: $Utils.Optional<ReferenceCountAggregateOutputType> | number
          }
        }
      }
      Study: {
        payload: Prisma.$StudyPayload<ExtArgs>
        fields: Prisma.StudyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudyFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudyFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudyPayload>
          }
          findFirst: {
            args: Prisma.StudyFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudyFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudyPayload>
          }
          findMany: {
            args: Prisma.StudyFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudyPayload>[]
          }
          create: {
            args: Prisma.StudyCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudyPayload>
          }
          createMany: {
            args: Prisma.StudyCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.StudyDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudyPayload>
          }
          update: {
            args: Prisma.StudyUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudyPayload>
          }
          deleteMany: {
            args: Prisma.StudyDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.StudyUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.StudyUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudyPayload>
          }
          aggregate: {
            args: Prisma.StudyAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateStudy>
          }
          groupBy: {
            args: Prisma.StudyGroupByArgs<ExtArgs>,
            result: $Utils.Optional<StudyGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudyCountArgs<ExtArgs>,
            result: $Utils.Optional<StudyCountAggregateOutputType> | number
          }
        }
      }
      WorkExperience: {
        payload: Prisma.$WorkExperiencePayload<ExtArgs>
        fields: Prisma.WorkExperienceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkExperienceFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkExperiencePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkExperienceFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkExperiencePayload>
          }
          findFirst: {
            args: Prisma.WorkExperienceFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkExperiencePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkExperienceFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkExperiencePayload>
          }
          findMany: {
            args: Prisma.WorkExperienceFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkExperiencePayload>[]
          }
          create: {
            args: Prisma.WorkExperienceCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkExperiencePayload>
          }
          createMany: {
            args: Prisma.WorkExperienceCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.WorkExperienceDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkExperiencePayload>
          }
          update: {
            args: Prisma.WorkExperienceUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkExperiencePayload>
          }
          deleteMany: {
            args: Prisma.WorkExperienceDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.WorkExperienceUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.WorkExperienceUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$WorkExperiencePayload>
          }
          aggregate: {
            args: Prisma.WorkExperienceAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateWorkExperience>
          }
          groupBy: {
            args: Prisma.WorkExperienceGroupByArgs<ExtArgs>,
            result: $Utils.Optional<WorkExperienceGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkExperienceCountArgs<ExtArgs>,
            result: $Utils.Optional<WorkExperienceCountAggregateOutputType> | number
          }
        }
      }
      Companies: {
        payload: Prisma.$CompaniesPayload<ExtArgs>
        fields: Prisma.CompaniesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompaniesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompaniesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompaniesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompaniesPayload>
          }
          findFirst: {
            args: Prisma.CompaniesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompaniesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompaniesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompaniesPayload>
          }
          findMany: {
            args: Prisma.CompaniesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompaniesPayload>[]
          }
          create: {
            args: Prisma.CompaniesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompaniesPayload>
          }
          createMany: {
            args: Prisma.CompaniesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CompaniesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompaniesPayload>
          }
          update: {
            args: Prisma.CompaniesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompaniesPayload>
          }
          deleteMany: {
            args: Prisma.CompaniesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CompaniesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CompaniesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompaniesPayload>
          }
          aggregate: {
            args: Prisma.CompaniesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCompanies>
          }
          groupBy: {
            args: Prisma.CompaniesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CompaniesGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompaniesCountArgs<ExtArgs>,
            result: $Utils.Optional<CompaniesCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type PersonCountOutputType
   */

  export type PersonCountOutputType = {
    languages: number
    references: number
    studies: number
    workExperiences: number
  }

  export type PersonCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    languages?: boolean | PersonCountOutputTypeCountLanguagesArgs
    references?: boolean | PersonCountOutputTypeCountReferencesArgs
    studies?: boolean | PersonCountOutputTypeCountStudiesArgs
    workExperiences?: boolean | PersonCountOutputTypeCountWorkExperiencesArgs
  }

  // Custom InputTypes

  /**
   * PersonCountOutputType without action
   */
  export type PersonCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonCountOutputType
     */
    select?: PersonCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * PersonCountOutputType without action
   */
  export type PersonCountOutputTypeCountLanguagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LanguageWhereInput
  }


  /**
   * PersonCountOutputType without action
   */
  export type PersonCountOutputTypeCountReferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReferenceWhereInput
  }


  /**
   * PersonCountOutputType without action
   */
  export type PersonCountOutputTypeCountStudiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudyWhereInput
  }


  /**
   * PersonCountOutputType without action
   */
  export type PersonCountOutputTypeCountWorkExperiencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkExperienceWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Person
   */

  export type AggregatePerson = {
    _count: PersonCountAggregateOutputType | null
    _avg: PersonAvgAggregateOutputType | null
    _sum: PersonSumAggregateOutputType | null
    _min: PersonMinAggregateOutputType | null
    _max: PersonMaxAggregateOutputType | null
  }

  export type PersonAvgAggregateOutputType = {
    id: number | null
  }

  export type PersonSumAggregateOutputType = {
    id: number | null
  }

  export type PersonMinAggregateOutputType = {
    id: number | null
    dni: string | null
    dniNumber: string | null
    birthday: Date | null
    name: string | null
    surname: string | null
    about: string | null
    address: string | null
    cp: string | null
    email: string | null
    phone: string | null
    cityPD: string | null
    countyPD: string | null
    gender: string | null
    liveAbroad: boolean | null
    currentCountry: string | null
    currentCity: string | null
  }

  export type PersonMaxAggregateOutputType = {
    id: number | null
    dni: string | null
    dniNumber: string | null
    birthday: Date | null
    name: string | null
    surname: string | null
    about: string | null
    address: string | null
    cp: string | null
    email: string | null
    phone: string | null
    cityPD: string | null
    countyPD: string | null
    gender: string | null
    liveAbroad: boolean | null
    currentCountry: string | null
    currentCity: string | null
  }

  export type PersonCountAggregateOutputType = {
    id: number
    dni: number
    dniNumber: number
    birthday: number
    name: number
    surname: number
    about: number
    address: number
    cp: number
    email: number
    phone: number
    cityPD: number
    countyPD: number
    gender: number
    liveAbroad: number
    currentCountry: number
    currentCity: number
    _all: number
  }


  export type PersonAvgAggregateInputType = {
    id?: true
  }

  export type PersonSumAggregateInputType = {
    id?: true
  }

  export type PersonMinAggregateInputType = {
    id?: true
    dni?: true
    dniNumber?: true
    birthday?: true
    name?: true
    surname?: true
    about?: true
    address?: true
    cp?: true
    email?: true
    phone?: true
    cityPD?: true
    countyPD?: true
    gender?: true
    liveAbroad?: true
    currentCountry?: true
    currentCity?: true
  }

  export type PersonMaxAggregateInputType = {
    id?: true
    dni?: true
    dniNumber?: true
    birthday?: true
    name?: true
    surname?: true
    about?: true
    address?: true
    cp?: true
    email?: true
    phone?: true
    cityPD?: true
    countyPD?: true
    gender?: true
    liveAbroad?: true
    currentCountry?: true
    currentCity?: true
  }

  export type PersonCountAggregateInputType = {
    id?: true
    dni?: true
    dniNumber?: true
    birthday?: true
    name?: true
    surname?: true
    about?: true
    address?: true
    cp?: true
    email?: true
    phone?: true
    cityPD?: true
    countyPD?: true
    gender?: true
    liveAbroad?: true
    currentCountry?: true
    currentCity?: true
    _all?: true
  }

  export type PersonAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Person to aggregate.
     */
    where?: PersonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of People to fetch.
     */
    orderBy?: PersonOrderByWithRelationAndSearchRelevanceInput | PersonOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PersonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` People from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` People.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned People
    **/
    _count?: true | PersonCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PersonAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PersonSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PersonMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PersonMaxAggregateInputType
  }

  export type GetPersonAggregateType<T extends PersonAggregateArgs> = {
        [P in keyof T & keyof AggregatePerson]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePerson[P]>
      : GetScalarType<T[P], AggregatePerson[P]>
  }




  export type PersonGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PersonWhereInput
    orderBy?: PersonOrderByWithAggregationInput | PersonOrderByWithAggregationInput[]
    by: PersonScalarFieldEnum[] | PersonScalarFieldEnum
    having?: PersonScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PersonCountAggregateInputType | true
    _avg?: PersonAvgAggregateInputType
    _sum?: PersonSumAggregateInputType
    _min?: PersonMinAggregateInputType
    _max?: PersonMaxAggregateInputType
  }

  export type PersonGroupByOutputType = {
    id: number
    dni: string
    dniNumber: string
    birthday: Date
    name: string
    surname: string
    about: string
    address: string
    cp: string | null
    email: string
    phone: string
    cityPD: string | null
    countyPD: string | null
    gender: string | null
    liveAbroad: boolean | null
    currentCountry: string | null
    currentCity: string | null
    _count: PersonCountAggregateOutputType | null
    _avg: PersonAvgAggregateOutputType | null
    _sum: PersonSumAggregateOutputType | null
    _min: PersonMinAggregateOutputType | null
    _max: PersonMaxAggregateOutputType | null
  }

  type GetPersonGroupByPayload<T extends PersonGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PersonGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PersonGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PersonGroupByOutputType[P]>
            : GetScalarType<T[P], PersonGroupByOutputType[P]>
        }
      >
    >


  export type PersonSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dni?: boolean
    dniNumber?: boolean
    birthday?: boolean
    name?: boolean
    surname?: boolean
    about?: boolean
    address?: boolean
    cp?: boolean
    email?: boolean
    phone?: boolean
    cityPD?: boolean
    countyPD?: boolean
    gender?: boolean
    liveAbroad?: boolean
    currentCountry?: boolean
    currentCity?: boolean
    languages?: boolean | Person$languagesArgs<ExtArgs>
    references?: boolean | Person$referencesArgs<ExtArgs>
    studies?: boolean | Person$studiesArgs<ExtArgs>
    workExperiences?: boolean | Person$workExperiencesArgs<ExtArgs>
    _count?: boolean | PersonCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["person"]>

  export type PersonSelectScalar = {
    id?: boolean
    dni?: boolean
    dniNumber?: boolean
    birthday?: boolean
    name?: boolean
    surname?: boolean
    about?: boolean
    address?: boolean
    cp?: boolean
    email?: boolean
    phone?: boolean
    cityPD?: boolean
    countyPD?: boolean
    gender?: boolean
    liveAbroad?: boolean
    currentCountry?: boolean
    currentCity?: boolean
  }

  export type PersonInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    languages?: boolean | Person$languagesArgs<ExtArgs>
    references?: boolean | Person$referencesArgs<ExtArgs>
    studies?: boolean | Person$studiesArgs<ExtArgs>
    workExperiences?: boolean | Person$workExperiencesArgs<ExtArgs>
    _count?: boolean | PersonCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $PersonPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Person"
    objects: {
      languages: Prisma.$LanguagePayload<ExtArgs>[]
      references: Prisma.$ReferencePayload<ExtArgs>[]
      studies: Prisma.$StudyPayload<ExtArgs>[]
      workExperiences: Prisma.$WorkExperiencePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      dni: string
      dniNumber: string
      birthday: Date
      name: string
      surname: string
      about: string
      address: string
      cp: string | null
      email: string
      phone: string
      cityPD: string | null
      countyPD: string | null
      gender: string | null
      liveAbroad: boolean | null
      currentCountry: string | null
      currentCity: string | null
    }, ExtArgs["result"]["person"]>
    composites: {}
  }


  type PersonGetPayload<S extends boolean | null | undefined | PersonDefaultArgs> = $Result.GetResult<Prisma.$PersonPayload, S>

  type PersonCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PersonFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PersonCountAggregateInputType | true
    }

  export interface PersonDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Person'], meta: { name: 'Person' } }
    /**
     * Find zero or one Person that matches the filter.
     * @param {PersonFindUniqueArgs} args - Arguments to find a Person
     * @example
     * // Get one Person
     * const person = await prisma.person.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PersonFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PersonFindUniqueArgs<ExtArgs>>
    ): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Person that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PersonFindUniqueOrThrowArgs} args - Arguments to find a Person
     * @example
     * // Get one Person
     * const person = await prisma.person.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PersonFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PersonFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Person that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonFindFirstArgs} args - Arguments to find a Person
     * @example
     * // Get one Person
     * const person = await prisma.person.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PersonFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PersonFindFirstArgs<ExtArgs>>
    ): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Person that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonFindFirstOrThrowArgs} args - Arguments to find a Person
     * @example
     * // Get one Person
     * const person = await prisma.person.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PersonFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PersonFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more People that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all People
     * const people = await prisma.person.findMany()
     * 
     * // Get first 10 People
     * const people = await prisma.person.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const personWithIdOnly = await prisma.person.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PersonFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PersonFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Person.
     * @param {PersonCreateArgs} args - Arguments to create a Person.
     * @example
     * // Create one Person
     * const Person = await prisma.person.create({
     *   data: {
     *     // ... data to create a Person
     *   }
     * })
     * 
    **/
    create<T extends PersonCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PersonCreateArgs<ExtArgs>>
    ): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many People.
     *     @param {PersonCreateManyArgs} args - Arguments to create many People.
     *     @example
     *     // Create many People
     *     const person = await prisma.person.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PersonCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PersonCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Person.
     * @param {PersonDeleteArgs} args - Arguments to delete one Person.
     * @example
     * // Delete one Person
     * const Person = await prisma.person.delete({
     *   where: {
     *     // ... filter to delete one Person
     *   }
     * })
     * 
    **/
    delete<T extends PersonDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PersonDeleteArgs<ExtArgs>>
    ): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Person.
     * @param {PersonUpdateArgs} args - Arguments to update one Person.
     * @example
     * // Update one Person
     * const person = await prisma.person.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PersonUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PersonUpdateArgs<ExtArgs>>
    ): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more People.
     * @param {PersonDeleteManyArgs} args - Arguments to filter People to delete.
     * @example
     * // Delete a few People
     * const { count } = await prisma.person.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PersonDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PersonDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more People.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many People
     * const person = await prisma.person.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PersonUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PersonUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Person.
     * @param {PersonUpsertArgs} args - Arguments to update or create a Person.
     * @example
     * // Update or create a Person
     * const person = await prisma.person.upsert({
     *   create: {
     *     // ... data to create a Person
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Person we want to update
     *   }
     * })
    **/
    upsert<T extends PersonUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PersonUpsertArgs<ExtArgs>>
    ): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of People.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonCountArgs} args - Arguments to filter People to count.
     * @example
     * // Count the number of People
     * const count = await prisma.person.count({
     *   where: {
     *     // ... the filter for the People we want to count
     *   }
     * })
    **/
    count<T extends PersonCountArgs>(
      args?: Subset<T, PersonCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PersonCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Person.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PersonAggregateArgs>(args: Subset<T, PersonAggregateArgs>): Prisma.PrismaPromise<GetPersonAggregateType<T>>

    /**
     * Group by Person.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PersonGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PersonGroupByArgs['orderBy'] }
        : { orderBy?: PersonGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PersonGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPersonGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Person model
   */
  readonly fields: PersonFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Person.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PersonClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    languages<T extends Person$languagesArgs<ExtArgs> = {}>(args?: Subset<T, Person$languagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, 'findMany'> | Null>;

    references<T extends Person$referencesArgs<ExtArgs> = {}>(args?: Subset<T, Person$referencesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferencePayload<ExtArgs>, T, 'findMany'> | Null>;

    studies<T extends Person$studiesArgs<ExtArgs> = {}>(args?: Subset<T, Person$studiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudyPayload<ExtArgs>, T, 'findMany'> | Null>;

    workExperiences<T extends Person$workExperiencesArgs<ExtArgs> = {}>(args?: Subset<T, Person$workExperiencesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkExperiencePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Person model
   */ 
  interface PersonFieldRefs {
    readonly id: FieldRef<"Person", 'Int'>
    readonly dni: FieldRef<"Person", 'String'>
    readonly dniNumber: FieldRef<"Person", 'String'>
    readonly birthday: FieldRef<"Person", 'DateTime'>
    readonly name: FieldRef<"Person", 'String'>
    readonly surname: FieldRef<"Person", 'String'>
    readonly about: FieldRef<"Person", 'String'>
    readonly address: FieldRef<"Person", 'String'>
    readonly cp: FieldRef<"Person", 'String'>
    readonly email: FieldRef<"Person", 'String'>
    readonly phone: FieldRef<"Person", 'String'>
    readonly cityPD: FieldRef<"Person", 'String'>
    readonly countyPD: FieldRef<"Person", 'String'>
    readonly gender: FieldRef<"Person", 'String'>
    readonly liveAbroad: FieldRef<"Person", 'Boolean'>
    readonly currentCountry: FieldRef<"Person", 'String'>
    readonly currentCity: FieldRef<"Person", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Person findUnique
   */
  export type PersonFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PersonInclude<ExtArgs> | null
    /**
     * Filter, which Person to fetch.
     */
    where: PersonWhereUniqueInput
  }


  /**
   * Person findUniqueOrThrow
   */
  export type PersonFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PersonInclude<ExtArgs> | null
    /**
     * Filter, which Person to fetch.
     */
    where: PersonWhereUniqueInput
  }


  /**
   * Person findFirst
   */
  export type PersonFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PersonInclude<ExtArgs> | null
    /**
     * Filter, which Person to fetch.
     */
    where?: PersonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of People to fetch.
     */
    orderBy?: PersonOrderByWithRelationAndSearchRelevanceInput | PersonOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for People.
     */
    cursor?: PersonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` People from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` People.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of People.
     */
    distinct?: PersonScalarFieldEnum | PersonScalarFieldEnum[]
  }


  /**
   * Person findFirstOrThrow
   */
  export type PersonFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PersonInclude<ExtArgs> | null
    /**
     * Filter, which Person to fetch.
     */
    where?: PersonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of People to fetch.
     */
    orderBy?: PersonOrderByWithRelationAndSearchRelevanceInput | PersonOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for People.
     */
    cursor?: PersonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` People from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` People.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of People.
     */
    distinct?: PersonScalarFieldEnum | PersonScalarFieldEnum[]
  }


  /**
   * Person findMany
   */
  export type PersonFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PersonInclude<ExtArgs> | null
    /**
     * Filter, which People to fetch.
     */
    where?: PersonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of People to fetch.
     */
    orderBy?: PersonOrderByWithRelationAndSearchRelevanceInput | PersonOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing People.
     */
    cursor?: PersonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` People from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` People.
     */
    skip?: number
    distinct?: PersonScalarFieldEnum | PersonScalarFieldEnum[]
  }


  /**
   * Person create
   */
  export type PersonCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PersonInclude<ExtArgs> | null
    /**
     * The data needed to create a Person.
     */
    data: XOR<PersonCreateInput, PersonUncheckedCreateInput>
  }


  /**
   * Person createMany
   */
  export type PersonCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many People.
     */
    data: PersonCreateManyInput | PersonCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Person update
   */
  export type PersonUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PersonInclude<ExtArgs> | null
    /**
     * The data needed to update a Person.
     */
    data: XOR<PersonUpdateInput, PersonUncheckedUpdateInput>
    /**
     * Choose, which Person to update.
     */
    where: PersonWhereUniqueInput
  }


  /**
   * Person updateMany
   */
  export type PersonUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update People.
     */
    data: XOR<PersonUpdateManyMutationInput, PersonUncheckedUpdateManyInput>
    /**
     * Filter which People to update
     */
    where?: PersonWhereInput
  }


  /**
   * Person upsert
   */
  export type PersonUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PersonInclude<ExtArgs> | null
    /**
     * The filter to search for the Person to update in case it exists.
     */
    where: PersonWhereUniqueInput
    /**
     * In case the Person found by the `where` argument doesn't exist, create a new Person with this data.
     */
    create: XOR<PersonCreateInput, PersonUncheckedCreateInput>
    /**
     * In case the Person was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PersonUpdateInput, PersonUncheckedUpdateInput>
  }


  /**
   * Person delete
   */
  export type PersonDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PersonInclude<ExtArgs> | null
    /**
     * Filter which Person to delete.
     */
    where: PersonWhereUniqueInput
  }


  /**
   * Person deleteMany
   */
  export type PersonDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which People to delete
     */
    where?: PersonWhereInput
  }


  /**
   * Person.languages
   */
  export type Person$languagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Language
     */
    select?: LanguageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LanguageInclude<ExtArgs> | null
    where?: LanguageWhereInput
    orderBy?: LanguageOrderByWithRelationAndSearchRelevanceInput | LanguageOrderByWithRelationAndSearchRelevanceInput[]
    cursor?: LanguageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LanguageScalarFieldEnum | LanguageScalarFieldEnum[]
  }


  /**
   * Person.references
   */
  export type Person$referencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reference
     */
    select?: ReferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReferenceInclude<ExtArgs> | null
    where?: ReferenceWhereInput
    orderBy?: ReferenceOrderByWithRelationAndSearchRelevanceInput | ReferenceOrderByWithRelationAndSearchRelevanceInput[]
    cursor?: ReferenceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReferenceScalarFieldEnum | ReferenceScalarFieldEnum[]
  }


  /**
   * Person.studies
   */
  export type Person$studiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Study
     */
    select?: StudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudyInclude<ExtArgs> | null
    where?: StudyWhereInput
    orderBy?: StudyOrderByWithRelationAndSearchRelevanceInput | StudyOrderByWithRelationAndSearchRelevanceInput[]
    cursor?: StudyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudyScalarFieldEnum | StudyScalarFieldEnum[]
  }


  /**
   * Person.workExperiences
   */
  export type Person$workExperiencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkExperience
     */
    select?: WorkExperienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkExperienceInclude<ExtArgs> | null
    where?: WorkExperienceWhereInput
    orderBy?: WorkExperienceOrderByWithRelationAndSearchRelevanceInput | WorkExperienceOrderByWithRelationAndSearchRelevanceInput[]
    cursor?: WorkExperienceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkExperienceScalarFieldEnum | WorkExperienceScalarFieldEnum[]
  }


  /**
   * Person without action
   */
  export type PersonDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PersonInclude<ExtArgs> | null
  }



  /**
   * Model Language
   */

  export type AggregateLanguage = {
    _count: LanguageCountAggregateOutputType | null
    _avg: LanguageAvgAggregateOutputType | null
    _sum: LanguageSumAggregateOutputType | null
    _min: LanguageMinAggregateOutputType | null
    _max: LanguageMaxAggregateOutputType | null
  }

  export type LanguageAvgAggregateOutputType = {
    id: number | null
    spokenLevel: number | null
    readLevel: number | null
    writtenLevel: number | null
    personId: number | null
  }

  export type LanguageSumAggregateOutputType = {
    id: number | null
    spokenLevel: number | null
    readLevel: number | null
    writtenLevel: number | null
    personId: number | null
  }

  export type LanguageMinAggregateOutputType = {
    id: number | null
    languageName: string | null
    spokenLevel: number | null
    readLevel: number | null
    writtenLevel: number | null
    personId: number | null
  }

  export type LanguageMaxAggregateOutputType = {
    id: number | null
    languageName: string | null
    spokenLevel: number | null
    readLevel: number | null
    writtenLevel: number | null
    personId: number | null
  }

  export type LanguageCountAggregateOutputType = {
    id: number
    languageName: number
    spokenLevel: number
    readLevel: number
    writtenLevel: number
    personId: number
    _all: number
  }


  export type LanguageAvgAggregateInputType = {
    id?: true
    spokenLevel?: true
    readLevel?: true
    writtenLevel?: true
    personId?: true
  }

  export type LanguageSumAggregateInputType = {
    id?: true
    spokenLevel?: true
    readLevel?: true
    writtenLevel?: true
    personId?: true
  }

  export type LanguageMinAggregateInputType = {
    id?: true
    languageName?: true
    spokenLevel?: true
    readLevel?: true
    writtenLevel?: true
    personId?: true
  }

  export type LanguageMaxAggregateInputType = {
    id?: true
    languageName?: true
    spokenLevel?: true
    readLevel?: true
    writtenLevel?: true
    personId?: true
  }

  export type LanguageCountAggregateInputType = {
    id?: true
    languageName?: true
    spokenLevel?: true
    readLevel?: true
    writtenLevel?: true
    personId?: true
    _all?: true
  }

  export type LanguageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Language to aggregate.
     */
    where?: LanguageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Languages to fetch.
     */
    orderBy?: LanguageOrderByWithRelationAndSearchRelevanceInput | LanguageOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LanguageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Languages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Languages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Languages
    **/
    _count?: true | LanguageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LanguageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LanguageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LanguageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LanguageMaxAggregateInputType
  }

  export type GetLanguageAggregateType<T extends LanguageAggregateArgs> = {
        [P in keyof T & keyof AggregateLanguage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLanguage[P]>
      : GetScalarType<T[P], AggregateLanguage[P]>
  }




  export type LanguageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LanguageWhereInput
    orderBy?: LanguageOrderByWithAggregationInput | LanguageOrderByWithAggregationInput[]
    by: LanguageScalarFieldEnum[] | LanguageScalarFieldEnum
    having?: LanguageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LanguageCountAggregateInputType | true
    _avg?: LanguageAvgAggregateInputType
    _sum?: LanguageSumAggregateInputType
    _min?: LanguageMinAggregateInputType
    _max?: LanguageMaxAggregateInputType
  }

  export type LanguageGroupByOutputType = {
    id: number
    languageName: string
    spokenLevel: number
    readLevel: number
    writtenLevel: number
    personId: number
    _count: LanguageCountAggregateOutputType | null
    _avg: LanguageAvgAggregateOutputType | null
    _sum: LanguageSumAggregateOutputType | null
    _min: LanguageMinAggregateOutputType | null
    _max: LanguageMaxAggregateOutputType | null
  }

  type GetLanguageGroupByPayload<T extends LanguageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LanguageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LanguageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LanguageGroupByOutputType[P]>
            : GetScalarType<T[P], LanguageGroupByOutputType[P]>
        }
      >
    >


  export type LanguageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    languageName?: boolean
    spokenLevel?: boolean
    readLevel?: boolean
    writtenLevel?: boolean
    personId?: boolean
    person?: boolean | PersonDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["language"]>

  export type LanguageSelectScalar = {
    id?: boolean
    languageName?: boolean
    spokenLevel?: boolean
    readLevel?: boolean
    writtenLevel?: boolean
    personId?: boolean
  }

  export type LanguageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    person?: boolean | PersonDefaultArgs<ExtArgs>
  }


  export type $LanguagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Language"
    objects: {
      person: Prisma.$PersonPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      languageName: string
      spokenLevel: number
      readLevel: number
      writtenLevel: number
      personId: number
    }, ExtArgs["result"]["language"]>
    composites: {}
  }


  type LanguageGetPayload<S extends boolean | null | undefined | LanguageDefaultArgs> = $Result.GetResult<Prisma.$LanguagePayload, S>

  type LanguageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LanguageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LanguageCountAggregateInputType | true
    }

  export interface LanguageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Language'], meta: { name: 'Language' } }
    /**
     * Find zero or one Language that matches the filter.
     * @param {LanguageFindUniqueArgs} args - Arguments to find a Language
     * @example
     * // Get one Language
     * const language = await prisma.language.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LanguageFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, LanguageFindUniqueArgs<ExtArgs>>
    ): Prisma__LanguageClient<$Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Language that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LanguageFindUniqueOrThrowArgs} args - Arguments to find a Language
     * @example
     * // Get one Language
     * const language = await prisma.language.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LanguageFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LanguageFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__LanguageClient<$Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Language that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageFindFirstArgs} args - Arguments to find a Language
     * @example
     * // Get one Language
     * const language = await prisma.language.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LanguageFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, LanguageFindFirstArgs<ExtArgs>>
    ): Prisma__LanguageClient<$Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Language that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageFindFirstOrThrowArgs} args - Arguments to find a Language
     * @example
     * // Get one Language
     * const language = await prisma.language.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LanguageFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LanguageFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__LanguageClient<$Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Languages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Languages
     * const languages = await prisma.language.findMany()
     * 
     * // Get first 10 Languages
     * const languages = await prisma.language.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const languageWithIdOnly = await prisma.language.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LanguageFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LanguageFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Language.
     * @param {LanguageCreateArgs} args - Arguments to create a Language.
     * @example
     * // Create one Language
     * const Language = await prisma.language.create({
     *   data: {
     *     // ... data to create a Language
     *   }
     * })
     * 
    **/
    create<T extends LanguageCreateArgs<ExtArgs>>(
      args: SelectSubset<T, LanguageCreateArgs<ExtArgs>>
    ): Prisma__LanguageClient<$Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Languages.
     *     @param {LanguageCreateManyArgs} args - Arguments to create many Languages.
     *     @example
     *     // Create many Languages
     *     const language = await prisma.language.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LanguageCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LanguageCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Language.
     * @param {LanguageDeleteArgs} args - Arguments to delete one Language.
     * @example
     * // Delete one Language
     * const Language = await prisma.language.delete({
     *   where: {
     *     // ... filter to delete one Language
     *   }
     * })
     * 
    **/
    delete<T extends LanguageDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, LanguageDeleteArgs<ExtArgs>>
    ): Prisma__LanguageClient<$Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Language.
     * @param {LanguageUpdateArgs} args - Arguments to update one Language.
     * @example
     * // Update one Language
     * const language = await prisma.language.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LanguageUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, LanguageUpdateArgs<ExtArgs>>
    ): Prisma__LanguageClient<$Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Languages.
     * @param {LanguageDeleteManyArgs} args - Arguments to filter Languages to delete.
     * @example
     * // Delete a few Languages
     * const { count } = await prisma.language.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LanguageDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LanguageDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Languages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Languages
     * const language = await prisma.language.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LanguageUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, LanguageUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Language.
     * @param {LanguageUpsertArgs} args - Arguments to update or create a Language.
     * @example
     * // Update or create a Language
     * const language = await prisma.language.upsert({
     *   create: {
     *     // ... data to create a Language
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Language we want to update
     *   }
     * })
    **/
    upsert<T extends LanguageUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, LanguageUpsertArgs<ExtArgs>>
    ): Prisma__LanguageClient<$Result.GetResult<Prisma.$LanguagePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Languages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageCountArgs} args - Arguments to filter Languages to count.
     * @example
     * // Count the number of Languages
     * const count = await prisma.language.count({
     *   where: {
     *     // ... the filter for the Languages we want to count
     *   }
     * })
    **/
    count<T extends LanguageCountArgs>(
      args?: Subset<T, LanguageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LanguageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Language.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LanguageAggregateArgs>(args: Subset<T, LanguageAggregateArgs>): Prisma.PrismaPromise<GetLanguageAggregateType<T>>

    /**
     * Group by Language.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LanguageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LanguageGroupByArgs['orderBy'] }
        : { orderBy?: LanguageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LanguageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLanguageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Language model
   */
  readonly fields: LanguageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Language.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LanguageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    person<T extends PersonDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PersonDefaultArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Language model
   */ 
  interface LanguageFieldRefs {
    readonly id: FieldRef<"Language", 'Int'>
    readonly languageName: FieldRef<"Language", 'String'>
    readonly spokenLevel: FieldRef<"Language", 'Int'>
    readonly readLevel: FieldRef<"Language", 'Int'>
    readonly writtenLevel: FieldRef<"Language", 'Int'>
    readonly personId: FieldRef<"Language", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Language findUnique
   */
  export type LanguageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Language
     */
    select?: LanguageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LanguageInclude<ExtArgs> | null
    /**
     * Filter, which Language to fetch.
     */
    where: LanguageWhereUniqueInput
  }


  /**
   * Language findUniqueOrThrow
   */
  export type LanguageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Language
     */
    select?: LanguageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LanguageInclude<ExtArgs> | null
    /**
     * Filter, which Language to fetch.
     */
    where: LanguageWhereUniqueInput
  }


  /**
   * Language findFirst
   */
  export type LanguageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Language
     */
    select?: LanguageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LanguageInclude<ExtArgs> | null
    /**
     * Filter, which Language to fetch.
     */
    where?: LanguageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Languages to fetch.
     */
    orderBy?: LanguageOrderByWithRelationAndSearchRelevanceInput | LanguageOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Languages.
     */
    cursor?: LanguageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Languages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Languages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Languages.
     */
    distinct?: LanguageScalarFieldEnum | LanguageScalarFieldEnum[]
  }


  /**
   * Language findFirstOrThrow
   */
  export type LanguageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Language
     */
    select?: LanguageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LanguageInclude<ExtArgs> | null
    /**
     * Filter, which Language to fetch.
     */
    where?: LanguageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Languages to fetch.
     */
    orderBy?: LanguageOrderByWithRelationAndSearchRelevanceInput | LanguageOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Languages.
     */
    cursor?: LanguageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Languages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Languages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Languages.
     */
    distinct?: LanguageScalarFieldEnum | LanguageScalarFieldEnum[]
  }


  /**
   * Language findMany
   */
  export type LanguageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Language
     */
    select?: LanguageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LanguageInclude<ExtArgs> | null
    /**
     * Filter, which Languages to fetch.
     */
    where?: LanguageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Languages to fetch.
     */
    orderBy?: LanguageOrderByWithRelationAndSearchRelevanceInput | LanguageOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Languages.
     */
    cursor?: LanguageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Languages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Languages.
     */
    skip?: number
    distinct?: LanguageScalarFieldEnum | LanguageScalarFieldEnum[]
  }


  /**
   * Language create
   */
  export type LanguageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Language
     */
    select?: LanguageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LanguageInclude<ExtArgs> | null
    /**
     * The data needed to create a Language.
     */
    data: XOR<LanguageCreateInput, LanguageUncheckedCreateInput>
  }


  /**
   * Language createMany
   */
  export type LanguageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Languages.
     */
    data: LanguageCreateManyInput | LanguageCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Language update
   */
  export type LanguageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Language
     */
    select?: LanguageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LanguageInclude<ExtArgs> | null
    /**
     * The data needed to update a Language.
     */
    data: XOR<LanguageUpdateInput, LanguageUncheckedUpdateInput>
    /**
     * Choose, which Language to update.
     */
    where: LanguageWhereUniqueInput
  }


  /**
   * Language updateMany
   */
  export type LanguageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Languages.
     */
    data: XOR<LanguageUpdateManyMutationInput, LanguageUncheckedUpdateManyInput>
    /**
     * Filter which Languages to update
     */
    where?: LanguageWhereInput
  }


  /**
   * Language upsert
   */
  export type LanguageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Language
     */
    select?: LanguageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LanguageInclude<ExtArgs> | null
    /**
     * The filter to search for the Language to update in case it exists.
     */
    where: LanguageWhereUniqueInput
    /**
     * In case the Language found by the `where` argument doesn't exist, create a new Language with this data.
     */
    create: XOR<LanguageCreateInput, LanguageUncheckedCreateInput>
    /**
     * In case the Language was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LanguageUpdateInput, LanguageUncheckedUpdateInput>
  }


  /**
   * Language delete
   */
  export type LanguageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Language
     */
    select?: LanguageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LanguageInclude<ExtArgs> | null
    /**
     * Filter which Language to delete.
     */
    where: LanguageWhereUniqueInput
  }


  /**
   * Language deleteMany
   */
  export type LanguageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Languages to delete
     */
    where?: LanguageWhereInput
  }


  /**
   * Language without action
   */
  export type LanguageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Language
     */
    select?: LanguageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LanguageInclude<ExtArgs> | null
  }



  /**
   * Model Reference
   */

  export type AggregateReference = {
    _count: ReferenceCountAggregateOutputType | null
    _avg: ReferenceAvgAggregateOutputType | null
    _sum: ReferenceSumAggregateOutputType | null
    _min: ReferenceMinAggregateOutputType | null
    _max: ReferenceMaxAggregateOutputType | null
  }

  export type ReferenceAvgAggregateOutputType = {
    id: number | null
    personId: number | null
  }

  export type ReferenceSumAggregateOutputType = {
    id: number | null
    personId: number | null
  }

  export type ReferenceMinAggregateOutputType = {
    id: number | null
    referenceName: string | null
    referenceSurname: string | null
    referencePhone: string | null
    referenceCompany: string | null
    personId: number | null
    referenceRole: string | null
    referenceType: string | null
  }

  export type ReferenceMaxAggregateOutputType = {
    id: number | null
    referenceName: string | null
    referenceSurname: string | null
    referencePhone: string | null
    referenceCompany: string | null
    personId: number | null
    referenceRole: string | null
    referenceType: string | null
  }

  export type ReferenceCountAggregateOutputType = {
    id: number
    referenceName: number
    referenceSurname: number
    referencePhone: number
    referenceCompany: number
    personId: number
    referenceRole: number
    referenceType: number
    _all: number
  }


  export type ReferenceAvgAggregateInputType = {
    id?: true
    personId?: true
  }

  export type ReferenceSumAggregateInputType = {
    id?: true
    personId?: true
  }

  export type ReferenceMinAggregateInputType = {
    id?: true
    referenceName?: true
    referenceSurname?: true
    referencePhone?: true
    referenceCompany?: true
    personId?: true
    referenceRole?: true
    referenceType?: true
  }

  export type ReferenceMaxAggregateInputType = {
    id?: true
    referenceName?: true
    referenceSurname?: true
    referencePhone?: true
    referenceCompany?: true
    personId?: true
    referenceRole?: true
    referenceType?: true
  }

  export type ReferenceCountAggregateInputType = {
    id?: true
    referenceName?: true
    referenceSurname?: true
    referencePhone?: true
    referenceCompany?: true
    personId?: true
    referenceRole?: true
    referenceType?: true
    _all?: true
  }

  export type ReferenceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reference to aggregate.
     */
    where?: ReferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of References to fetch.
     */
    orderBy?: ReferenceOrderByWithRelationAndSearchRelevanceInput | ReferenceOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` References from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` References.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned References
    **/
    _count?: true | ReferenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReferenceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReferenceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReferenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReferenceMaxAggregateInputType
  }

  export type GetReferenceAggregateType<T extends ReferenceAggregateArgs> = {
        [P in keyof T & keyof AggregateReference]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReference[P]>
      : GetScalarType<T[P], AggregateReference[P]>
  }




  export type ReferenceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReferenceWhereInput
    orderBy?: ReferenceOrderByWithAggregationInput | ReferenceOrderByWithAggregationInput[]
    by: ReferenceScalarFieldEnum[] | ReferenceScalarFieldEnum
    having?: ReferenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReferenceCountAggregateInputType | true
    _avg?: ReferenceAvgAggregateInputType
    _sum?: ReferenceSumAggregateInputType
    _min?: ReferenceMinAggregateInputType
    _max?: ReferenceMaxAggregateInputType
  }

  export type ReferenceGroupByOutputType = {
    id: number
    referenceName: string
    referenceSurname: string
    referencePhone: string
    referenceCompany: string | null
    personId: number
    referenceRole: string | null
    referenceType: string
    _count: ReferenceCountAggregateOutputType | null
    _avg: ReferenceAvgAggregateOutputType | null
    _sum: ReferenceSumAggregateOutputType | null
    _min: ReferenceMinAggregateOutputType | null
    _max: ReferenceMaxAggregateOutputType | null
  }

  type GetReferenceGroupByPayload<T extends ReferenceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReferenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReferenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReferenceGroupByOutputType[P]>
            : GetScalarType<T[P], ReferenceGroupByOutputType[P]>
        }
      >
    >


  export type ReferenceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    referenceName?: boolean
    referenceSurname?: boolean
    referencePhone?: boolean
    referenceCompany?: boolean
    personId?: boolean
    referenceRole?: boolean
    referenceType?: boolean
    person?: boolean | PersonDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reference"]>

  export type ReferenceSelectScalar = {
    id?: boolean
    referenceName?: boolean
    referenceSurname?: boolean
    referencePhone?: boolean
    referenceCompany?: boolean
    personId?: boolean
    referenceRole?: boolean
    referenceType?: boolean
  }

  export type ReferenceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    person?: boolean | PersonDefaultArgs<ExtArgs>
  }


  export type $ReferencePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Reference"
    objects: {
      person: Prisma.$PersonPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      referenceName: string
      referenceSurname: string
      referencePhone: string
      referenceCompany: string | null
      personId: number
      referenceRole: string | null
      referenceType: string
    }, ExtArgs["result"]["reference"]>
    composites: {}
  }


  type ReferenceGetPayload<S extends boolean | null | undefined | ReferenceDefaultArgs> = $Result.GetResult<Prisma.$ReferencePayload, S>

  type ReferenceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ReferenceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReferenceCountAggregateInputType | true
    }

  export interface ReferenceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Reference'], meta: { name: 'Reference' } }
    /**
     * Find zero or one Reference that matches the filter.
     * @param {ReferenceFindUniqueArgs} args - Arguments to find a Reference
     * @example
     * // Get one Reference
     * const reference = await prisma.reference.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ReferenceFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ReferenceFindUniqueArgs<ExtArgs>>
    ): Prisma__ReferenceClient<$Result.GetResult<Prisma.$ReferencePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Reference that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ReferenceFindUniqueOrThrowArgs} args - Arguments to find a Reference
     * @example
     * // Get one Reference
     * const reference = await prisma.reference.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ReferenceFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ReferenceFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ReferenceClient<$Result.GetResult<Prisma.$ReferencePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Reference that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferenceFindFirstArgs} args - Arguments to find a Reference
     * @example
     * // Get one Reference
     * const reference = await prisma.reference.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ReferenceFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ReferenceFindFirstArgs<ExtArgs>>
    ): Prisma__ReferenceClient<$Result.GetResult<Prisma.$ReferencePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Reference that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferenceFindFirstOrThrowArgs} args - Arguments to find a Reference
     * @example
     * // Get one Reference
     * const reference = await prisma.reference.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ReferenceFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ReferenceFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ReferenceClient<$Result.GetResult<Prisma.$ReferencePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more References that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferenceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all References
     * const references = await prisma.reference.findMany()
     * 
     * // Get first 10 References
     * const references = await prisma.reference.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const referenceWithIdOnly = await prisma.reference.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ReferenceFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReferenceFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReferencePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Reference.
     * @param {ReferenceCreateArgs} args - Arguments to create a Reference.
     * @example
     * // Create one Reference
     * const Reference = await prisma.reference.create({
     *   data: {
     *     // ... data to create a Reference
     *   }
     * })
     * 
    **/
    create<T extends ReferenceCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ReferenceCreateArgs<ExtArgs>>
    ): Prisma__ReferenceClient<$Result.GetResult<Prisma.$ReferencePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many References.
     *     @param {ReferenceCreateManyArgs} args - Arguments to create many References.
     *     @example
     *     // Create many References
     *     const reference = await prisma.reference.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ReferenceCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReferenceCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Reference.
     * @param {ReferenceDeleteArgs} args - Arguments to delete one Reference.
     * @example
     * // Delete one Reference
     * const Reference = await prisma.reference.delete({
     *   where: {
     *     // ... filter to delete one Reference
     *   }
     * })
     * 
    **/
    delete<T extends ReferenceDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ReferenceDeleteArgs<ExtArgs>>
    ): Prisma__ReferenceClient<$Result.GetResult<Prisma.$ReferencePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Reference.
     * @param {ReferenceUpdateArgs} args - Arguments to update one Reference.
     * @example
     * // Update one Reference
     * const reference = await prisma.reference.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ReferenceUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ReferenceUpdateArgs<ExtArgs>>
    ): Prisma__ReferenceClient<$Result.GetResult<Prisma.$ReferencePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more References.
     * @param {ReferenceDeleteManyArgs} args - Arguments to filter References to delete.
     * @example
     * // Delete a few References
     * const { count } = await prisma.reference.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ReferenceDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReferenceDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more References.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many References
     * const reference = await prisma.reference.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ReferenceUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ReferenceUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Reference.
     * @param {ReferenceUpsertArgs} args - Arguments to update or create a Reference.
     * @example
     * // Update or create a Reference
     * const reference = await prisma.reference.upsert({
     *   create: {
     *     // ... data to create a Reference
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reference we want to update
     *   }
     * })
    **/
    upsert<T extends ReferenceUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ReferenceUpsertArgs<ExtArgs>>
    ): Prisma__ReferenceClient<$Result.GetResult<Prisma.$ReferencePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of References.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferenceCountArgs} args - Arguments to filter References to count.
     * @example
     * // Count the number of References
     * const count = await prisma.reference.count({
     *   where: {
     *     // ... the filter for the References we want to count
     *   }
     * })
    **/
    count<T extends ReferenceCountArgs>(
      args?: Subset<T, ReferenceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReferenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReferenceAggregateArgs>(args: Subset<T, ReferenceAggregateArgs>): Prisma.PrismaPromise<GetReferenceAggregateType<T>>

    /**
     * Group by Reference.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReferenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReferenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReferenceGroupByArgs['orderBy'] }
        : { orderBy?: ReferenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReferenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReferenceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Reference model
   */
  readonly fields: ReferenceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Reference.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReferenceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    person<T extends PersonDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PersonDefaultArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Reference model
   */ 
  interface ReferenceFieldRefs {
    readonly id: FieldRef<"Reference", 'Int'>
    readonly referenceName: FieldRef<"Reference", 'String'>
    readonly referenceSurname: FieldRef<"Reference", 'String'>
    readonly referencePhone: FieldRef<"Reference", 'String'>
    readonly referenceCompany: FieldRef<"Reference", 'String'>
    readonly personId: FieldRef<"Reference", 'Int'>
    readonly referenceRole: FieldRef<"Reference", 'String'>
    readonly referenceType: FieldRef<"Reference", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Reference findUnique
   */
  export type ReferenceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reference
     */
    select?: ReferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReferenceInclude<ExtArgs> | null
    /**
     * Filter, which Reference to fetch.
     */
    where: ReferenceWhereUniqueInput
  }


  /**
   * Reference findUniqueOrThrow
   */
  export type ReferenceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reference
     */
    select?: ReferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReferenceInclude<ExtArgs> | null
    /**
     * Filter, which Reference to fetch.
     */
    where: ReferenceWhereUniqueInput
  }


  /**
   * Reference findFirst
   */
  export type ReferenceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reference
     */
    select?: ReferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReferenceInclude<ExtArgs> | null
    /**
     * Filter, which Reference to fetch.
     */
    where?: ReferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of References to fetch.
     */
    orderBy?: ReferenceOrderByWithRelationAndSearchRelevanceInput | ReferenceOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for References.
     */
    cursor?: ReferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` References from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` References.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of References.
     */
    distinct?: ReferenceScalarFieldEnum | ReferenceScalarFieldEnum[]
  }


  /**
   * Reference findFirstOrThrow
   */
  export type ReferenceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reference
     */
    select?: ReferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReferenceInclude<ExtArgs> | null
    /**
     * Filter, which Reference to fetch.
     */
    where?: ReferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of References to fetch.
     */
    orderBy?: ReferenceOrderByWithRelationAndSearchRelevanceInput | ReferenceOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for References.
     */
    cursor?: ReferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` References from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` References.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of References.
     */
    distinct?: ReferenceScalarFieldEnum | ReferenceScalarFieldEnum[]
  }


  /**
   * Reference findMany
   */
  export type ReferenceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reference
     */
    select?: ReferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReferenceInclude<ExtArgs> | null
    /**
     * Filter, which References to fetch.
     */
    where?: ReferenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of References to fetch.
     */
    orderBy?: ReferenceOrderByWithRelationAndSearchRelevanceInput | ReferenceOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing References.
     */
    cursor?: ReferenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` References from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` References.
     */
    skip?: number
    distinct?: ReferenceScalarFieldEnum | ReferenceScalarFieldEnum[]
  }


  /**
   * Reference create
   */
  export type ReferenceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reference
     */
    select?: ReferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReferenceInclude<ExtArgs> | null
    /**
     * The data needed to create a Reference.
     */
    data: XOR<ReferenceCreateInput, ReferenceUncheckedCreateInput>
  }


  /**
   * Reference createMany
   */
  export type ReferenceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many References.
     */
    data: ReferenceCreateManyInput | ReferenceCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Reference update
   */
  export type ReferenceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reference
     */
    select?: ReferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReferenceInclude<ExtArgs> | null
    /**
     * The data needed to update a Reference.
     */
    data: XOR<ReferenceUpdateInput, ReferenceUncheckedUpdateInput>
    /**
     * Choose, which Reference to update.
     */
    where: ReferenceWhereUniqueInput
  }


  /**
   * Reference updateMany
   */
  export type ReferenceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update References.
     */
    data: XOR<ReferenceUpdateManyMutationInput, ReferenceUncheckedUpdateManyInput>
    /**
     * Filter which References to update
     */
    where?: ReferenceWhereInput
  }


  /**
   * Reference upsert
   */
  export type ReferenceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reference
     */
    select?: ReferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReferenceInclude<ExtArgs> | null
    /**
     * The filter to search for the Reference to update in case it exists.
     */
    where: ReferenceWhereUniqueInput
    /**
     * In case the Reference found by the `where` argument doesn't exist, create a new Reference with this data.
     */
    create: XOR<ReferenceCreateInput, ReferenceUncheckedCreateInput>
    /**
     * In case the Reference was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReferenceUpdateInput, ReferenceUncheckedUpdateInput>
  }


  /**
   * Reference delete
   */
  export type ReferenceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reference
     */
    select?: ReferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReferenceInclude<ExtArgs> | null
    /**
     * Filter which Reference to delete.
     */
    where: ReferenceWhereUniqueInput
  }


  /**
   * Reference deleteMany
   */
  export type ReferenceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which References to delete
     */
    where?: ReferenceWhereInput
  }


  /**
   * Reference without action
   */
  export type ReferenceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Reference
     */
    select?: ReferenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReferenceInclude<ExtArgs> | null
  }



  /**
   * Model Study
   */

  export type AggregateStudy = {
    _count: StudyCountAggregateOutputType | null
    _avg: StudyAvgAggregateOutputType | null
    _sum: StudySumAggregateOutputType | null
    _min: StudyMinAggregateOutputType | null
    _max: StudyMaxAggregateOutputType | null
  }

  export type StudyAvgAggregateOutputType = {
    id: number | null
    personId: number | null
  }

  export type StudySumAggregateOutputType = {
    id: number | null
    personId: number | null
  }

  export type StudyMinAggregateOutputType = {
    id: number | null
    level: string | null
    title: string | null
    institute: string | null
    fieldOfStudy: string | null
    startStudyDate: Date | null
    personId: number | null
    currentlyStudying: boolean | null
    studySitutation: string | null
    cityStudy: string | null
    countyStudy: string | null
    endStudyDate: Date | null
  }

  export type StudyMaxAggregateOutputType = {
    id: number | null
    level: string | null
    title: string | null
    institute: string | null
    fieldOfStudy: string | null
    startStudyDate: Date | null
    personId: number | null
    currentlyStudying: boolean | null
    studySitutation: string | null
    cityStudy: string | null
    countyStudy: string | null
    endStudyDate: Date | null
  }

  export type StudyCountAggregateOutputType = {
    id: number
    level: number
    title: number
    institute: number
    fieldOfStudy: number
    startStudyDate: number
    personId: number
    currentlyStudying: number
    studySitutation: number
    cityStudy: number
    countyStudy: number
    endStudyDate: number
    _all: number
  }


  export type StudyAvgAggregateInputType = {
    id?: true
    personId?: true
  }

  export type StudySumAggregateInputType = {
    id?: true
    personId?: true
  }

  export type StudyMinAggregateInputType = {
    id?: true
    level?: true
    title?: true
    institute?: true
    fieldOfStudy?: true
    startStudyDate?: true
    personId?: true
    currentlyStudying?: true
    studySitutation?: true
    cityStudy?: true
    countyStudy?: true
    endStudyDate?: true
  }

  export type StudyMaxAggregateInputType = {
    id?: true
    level?: true
    title?: true
    institute?: true
    fieldOfStudy?: true
    startStudyDate?: true
    personId?: true
    currentlyStudying?: true
    studySitutation?: true
    cityStudy?: true
    countyStudy?: true
    endStudyDate?: true
  }

  export type StudyCountAggregateInputType = {
    id?: true
    level?: true
    title?: true
    institute?: true
    fieldOfStudy?: true
    startStudyDate?: true
    personId?: true
    currentlyStudying?: true
    studySitutation?: true
    cityStudy?: true
    countyStudy?: true
    endStudyDate?: true
    _all?: true
  }

  export type StudyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Study to aggregate.
     */
    where?: StudyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Studies to fetch.
     */
    orderBy?: StudyOrderByWithRelationAndSearchRelevanceInput | StudyOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Studies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Studies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Studies
    **/
    _count?: true | StudyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudyMaxAggregateInputType
  }

  export type GetStudyAggregateType<T extends StudyAggregateArgs> = {
        [P in keyof T & keyof AggregateStudy]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudy[P]>
      : GetScalarType<T[P], AggregateStudy[P]>
  }




  export type StudyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudyWhereInput
    orderBy?: StudyOrderByWithAggregationInput | StudyOrderByWithAggregationInput[]
    by: StudyScalarFieldEnum[] | StudyScalarFieldEnum
    having?: StudyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudyCountAggregateInputType | true
    _avg?: StudyAvgAggregateInputType
    _sum?: StudySumAggregateInputType
    _min?: StudyMinAggregateInputType
    _max?: StudyMaxAggregateInputType
  }

  export type StudyGroupByOutputType = {
    id: number
    level: string
    title: string
    institute: string
    fieldOfStudy: string
    startStudyDate: Date
    personId: number
    currentlyStudying: boolean | null
    studySitutation: string | null
    cityStudy: string | null
    countyStudy: string | null
    endStudyDate: Date | null
    _count: StudyCountAggregateOutputType | null
    _avg: StudyAvgAggregateOutputType | null
    _sum: StudySumAggregateOutputType | null
    _min: StudyMinAggregateOutputType | null
    _max: StudyMaxAggregateOutputType | null
  }

  type GetStudyGroupByPayload<T extends StudyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudyGroupByOutputType[P]>
            : GetScalarType<T[P], StudyGroupByOutputType[P]>
        }
      >
    >


  export type StudySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    level?: boolean
    title?: boolean
    institute?: boolean
    fieldOfStudy?: boolean
    startStudyDate?: boolean
    personId?: boolean
    currentlyStudying?: boolean
    studySitutation?: boolean
    cityStudy?: boolean
    countyStudy?: boolean
    endStudyDate?: boolean
    person?: boolean | PersonDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["study"]>

  export type StudySelectScalar = {
    id?: boolean
    level?: boolean
    title?: boolean
    institute?: boolean
    fieldOfStudy?: boolean
    startStudyDate?: boolean
    personId?: boolean
    currentlyStudying?: boolean
    studySitutation?: boolean
    cityStudy?: boolean
    countyStudy?: boolean
    endStudyDate?: boolean
  }

  export type StudyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    person?: boolean | PersonDefaultArgs<ExtArgs>
  }


  export type $StudyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Study"
    objects: {
      person: Prisma.$PersonPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      level: string
      title: string
      institute: string
      fieldOfStudy: string
      startStudyDate: Date
      personId: number
      currentlyStudying: boolean | null
      studySitutation: string | null
      cityStudy: string | null
      countyStudy: string | null
      endStudyDate: Date | null
    }, ExtArgs["result"]["study"]>
    composites: {}
  }


  type StudyGetPayload<S extends boolean | null | undefined | StudyDefaultArgs> = $Result.GetResult<Prisma.$StudyPayload, S>

  type StudyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StudyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StudyCountAggregateInputType | true
    }

  export interface StudyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Study'], meta: { name: 'Study' } }
    /**
     * Find zero or one Study that matches the filter.
     * @param {StudyFindUniqueArgs} args - Arguments to find a Study
     * @example
     * // Get one Study
     * const study = await prisma.study.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StudyFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, StudyFindUniqueArgs<ExtArgs>>
    ): Prisma__StudyClient<$Result.GetResult<Prisma.$StudyPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Study that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {StudyFindUniqueOrThrowArgs} args - Arguments to find a Study
     * @example
     * // Get one Study
     * const study = await prisma.study.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StudyFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StudyFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__StudyClient<$Result.GetResult<Prisma.$StudyPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Study that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyFindFirstArgs} args - Arguments to find a Study
     * @example
     * // Get one Study
     * const study = await prisma.study.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StudyFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, StudyFindFirstArgs<ExtArgs>>
    ): Prisma__StudyClient<$Result.GetResult<Prisma.$StudyPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Study that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyFindFirstOrThrowArgs} args - Arguments to find a Study
     * @example
     * // Get one Study
     * const study = await prisma.study.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StudyFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StudyFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__StudyClient<$Result.GetResult<Prisma.$StudyPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Studies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Studies
     * const studies = await prisma.study.findMany()
     * 
     * // Get first 10 Studies
     * const studies = await prisma.study.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studyWithIdOnly = await prisma.study.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StudyFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StudyFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudyPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Study.
     * @param {StudyCreateArgs} args - Arguments to create a Study.
     * @example
     * // Create one Study
     * const Study = await prisma.study.create({
     *   data: {
     *     // ... data to create a Study
     *   }
     * })
     * 
    **/
    create<T extends StudyCreateArgs<ExtArgs>>(
      args: SelectSubset<T, StudyCreateArgs<ExtArgs>>
    ): Prisma__StudyClient<$Result.GetResult<Prisma.$StudyPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Studies.
     *     @param {StudyCreateManyArgs} args - Arguments to create many Studies.
     *     @example
     *     // Create many Studies
     *     const study = await prisma.study.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StudyCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StudyCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Study.
     * @param {StudyDeleteArgs} args - Arguments to delete one Study.
     * @example
     * // Delete one Study
     * const Study = await prisma.study.delete({
     *   where: {
     *     // ... filter to delete one Study
     *   }
     * })
     * 
    **/
    delete<T extends StudyDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, StudyDeleteArgs<ExtArgs>>
    ): Prisma__StudyClient<$Result.GetResult<Prisma.$StudyPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Study.
     * @param {StudyUpdateArgs} args - Arguments to update one Study.
     * @example
     * // Update one Study
     * const study = await prisma.study.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StudyUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, StudyUpdateArgs<ExtArgs>>
    ): Prisma__StudyClient<$Result.GetResult<Prisma.$StudyPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Studies.
     * @param {StudyDeleteManyArgs} args - Arguments to filter Studies to delete.
     * @example
     * // Delete a few Studies
     * const { count } = await prisma.study.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StudyDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StudyDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Studies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Studies
     * const study = await prisma.study.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StudyUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, StudyUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Study.
     * @param {StudyUpsertArgs} args - Arguments to update or create a Study.
     * @example
     * // Update or create a Study
     * const study = await prisma.study.upsert({
     *   create: {
     *     // ... data to create a Study
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Study we want to update
     *   }
     * })
    **/
    upsert<T extends StudyUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, StudyUpsertArgs<ExtArgs>>
    ): Prisma__StudyClient<$Result.GetResult<Prisma.$StudyPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Studies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyCountArgs} args - Arguments to filter Studies to count.
     * @example
     * // Count the number of Studies
     * const count = await prisma.study.count({
     *   where: {
     *     // ... the filter for the Studies we want to count
     *   }
     * })
    **/
    count<T extends StudyCountArgs>(
      args?: Subset<T, StudyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Study.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudyAggregateArgs>(args: Subset<T, StudyAggregateArgs>): Prisma.PrismaPromise<GetStudyAggregateType<T>>

    /**
     * Group by Study.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudyGroupByArgs['orderBy'] }
        : { orderBy?: StudyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Study model
   */
  readonly fields: StudyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Study.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    person<T extends PersonDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PersonDefaultArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Study model
   */ 
  interface StudyFieldRefs {
    readonly id: FieldRef<"Study", 'Int'>
    readonly level: FieldRef<"Study", 'String'>
    readonly title: FieldRef<"Study", 'String'>
    readonly institute: FieldRef<"Study", 'String'>
    readonly fieldOfStudy: FieldRef<"Study", 'String'>
    readonly startStudyDate: FieldRef<"Study", 'DateTime'>
    readonly personId: FieldRef<"Study", 'Int'>
    readonly currentlyStudying: FieldRef<"Study", 'Boolean'>
    readonly studySitutation: FieldRef<"Study", 'String'>
    readonly cityStudy: FieldRef<"Study", 'String'>
    readonly countyStudy: FieldRef<"Study", 'String'>
    readonly endStudyDate: FieldRef<"Study", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Study findUnique
   */
  export type StudyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Study
     */
    select?: StudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudyInclude<ExtArgs> | null
    /**
     * Filter, which Study to fetch.
     */
    where: StudyWhereUniqueInput
  }


  /**
   * Study findUniqueOrThrow
   */
  export type StudyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Study
     */
    select?: StudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudyInclude<ExtArgs> | null
    /**
     * Filter, which Study to fetch.
     */
    where: StudyWhereUniqueInput
  }


  /**
   * Study findFirst
   */
  export type StudyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Study
     */
    select?: StudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudyInclude<ExtArgs> | null
    /**
     * Filter, which Study to fetch.
     */
    where?: StudyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Studies to fetch.
     */
    orderBy?: StudyOrderByWithRelationAndSearchRelevanceInput | StudyOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Studies.
     */
    cursor?: StudyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Studies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Studies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Studies.
     */
    distinct?: StudyScalarFieldEnum | StudyScalarFieldEnum[]
  }


  /**
   * Study findFirstOrThrow
   */
  export type StudyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Study
     */
    select?: StudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudyInclude<ExtArgs> | null
    /**
     * Filter, which Study to fetch.
     */
    where?: StudyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Studies to fetch.
     */
    orderBy?: StudyOrderByWithRelationAndSearchRelevanceInput | StudyOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Studies.
     */
    cursor?: StudyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Studies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Studies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Studies.
     */
    distinct?: StudyScalarFieldEnum | StudyScalarFieldEnum[]
  }


  /**
   * Study findMany
   */
  export type StudyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Study
     */
    select?: StudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudyInclude<ExtArgs> | null
    /**
     * Filter, which Studies to fetch.
     */
    where?: StudyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Studies to fetch.
     */
    orderBy?: StudyOrderByWithRelationAndSearchRelevanceInput | StudyOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Studies.
     */
    cursor?: StudyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Studies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Studies.
     */
    skip?: number
    distinct?: StudyScalarFieldEnum | StudyScalarFieldEnum[]
  }


  /**
   * Study create
   */
  export type StudyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Study
     */
    select?: StudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudyInclude<ExtArgs> | null
    /**
     * The data needed to create a Study.
     */
    data: XOR<StudyCreateInput, StudyUncheckedCreateInput>
  }


  /**
   * Study createMany
   */
  export type StudyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Studies.
     */
    data: StudyCreateManyInput | StudyCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Study update
   */
  export type StudyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Study
     */
    select?: StudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudyInclude<ExtArgs> | null
    /**
     * The data needed to update a Study.
     */
    data: XOR<StudyUpdateInput, StudyUncheckedUpdateInput>
    /**
     * Choose, which Study to update.
     */
    where: StudyWhereUniqueInput
  }


  /**
   * Study updateMany
   */
  export type StudyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Studies.
     */
    data: XOR<StudyUpdateManyMutationInput, StudyUncheckedUpdateManyInput>
    /**
     * Filter which Studies to update
     */
    where?: StudyWhereInput
  }


  /**
   * Study upsert
   */
  export type StudyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Study
     */
    select?: StudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudyInclude<ExtArgs> | null
    /**
     * The filter to search for the Study to update in case it exists.
     */
    where: StudyWhereUniqueInput
    /**
     * In case the Study found by the `where` argument doesn't exist, create a new Study with this data.
     */
    create: XOR<StudyCreateInput, StudyUncheckedCreateInput>
    /**
     * In case the Study was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudyUpdateInput, StudyUncheckedUpdateInput>
  }


  /**
   * Study delete
   */
  export type StudyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Study
     */
    select?: StudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudyInclude<ExtArgs> | null
    /**
     * Filter which Study to delete.
     */
    where: StudyWhereUniqueInput
  }


  /**
   * Study deleteMany
   */
  export type StudyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Studies to delete
     */
    where?: StudyWhereInput
  }


  /**
   * Study without action
   */
  export type StudyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Study
     */
    select?: StudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StudyInclude<ExtArgs> | null
  }



  /**
   * Model WorkExperience
   */

  export type AggregateWorkExperience = {
    _count: WorkExperienceCountAggregateOutputType | null
    _avg: WorkExperienceAvgAggregateOutputType | null
    _sum: WorkExperienceSumAggregateOutputType | null
    _min: WorkExperienceMinAggregateOutputType | null
    _max: WorkExperienceMaxAggregateOutputType | null
  }

  export type WorkExperienceAvgAggregateOutputType = {
    id: number | null
    personId: number | null
  }

  export type WorkExperienceSumAggregateOutputType = {
    id: number | null
    personId: number | null
  }

  export type WorkExperienceMinAggregateOutputType = {
    id: number | null
    role: string | null
    company: string | null
    workField: string | null
    positionLevel: string | null
    peopleInCharge: string | null
    personId: number | null
    currentlyWorking: boolean | null
    endWorkDate: Date | null
    salary: string | null
    startWorkDate: Date | null
    task: string | null
  }

  export type WorkExperienceMaxAggregateOutputType = {
    id: number | null
    role: string | null
    company: string | null
    workField: string | null
    positionLevel: string | null
    peopleInCharge: string | null
    personId: number | null
    currentlyWorking: boolean | null
    endWorkDate: Date | null
    salary: string | null
    startWorkDate: Date | null
    task: string | null
  }

  export type WorkExperienceCountAggregateOutputType = {
    id: number
    role: number
    company: number
    workField: number
    positionLevel: number
    peopleInCharge: number
    personId: number
    currentlyWorking: number
    endWorkDate: number
    salary: number
    skills: number
    startWorkDate: number
    task: number
    _all: number
  }


  export type WorkExperienceAvgAggregateInputType = {
    id?: true
    personId?: true
  }

  export type WorkExperienceSumAggregateInputType = {
    id?: true
    personId?: true
  }

  export type WorkExperienceMinAggregateInputType = {
    id?: true
    role?: true
    company?: true
    workField?: true
    positionLevel?: true
    peopleInCharge?: true
    personId?: true
    currentlyWorking?: true
    endWorkDate?: true
    salary?: true
    startWorkDate?: true
    task?: true
  }

  export type WorkExperienceMaxAggregateInputType = {
    id?: true
    role?: true
    company?: true
    workField?: true
    positionLevel?: true
    peopleInCharge?: true
    personId?: true
    currentlyWorking?: true
    endWorkDate?: true
    salary?: true
    startWorkDate?: true
    task?: true
  }

  export type WorkExperienceCountAggregateInputType = {
    id?: true
    role?: true
    company?: true
    workField?: true
    positionLevel?: true
    peopleInCharge?: true
    personId?: true
    currentlyWorking?: true
    endWorkDate?: true
    salary?: true
    skills?: true
    startWorkDate?: true
    task?: true
    _all?: true
  }

  export type WorkExperienceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkExperience to aggregate.
     */
    where?: WorkExperienceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkExperiences to fetch.
     */
    orderBy?: WorkExperienceOrderByWithRelationAndSearchRelevanceInput | WorkExperienceOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkExperienceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkExperiences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkExperiences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkExperiences
    **/
    _count?: true | WorkExperienceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkExperienceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkExperienceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkExperienceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkExperienceMaxAggregateInputType
  }

  export type GetWorkExperienceAggregateType<T extends WorkExperienceAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkExperience]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkExperience[P]>
      : GetScalarType<T[P], AggregateWorkExperience[P]>
  }




  export type WorkExperienceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkExperienceWhereInput
    orderBy?: WorkExperienceOrderByWithAggregationInput | WorkExperienceOrderByWithAggregationInput[]
    by: WorkExperienceScalarFieldEnum[] | WorkExperienceScalarFieldEnum
    having?: WorkExperienceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkExperienceCountAggregateInputType | true
    _avg?: WorkExperienceAvgAggregateInputType
    _sum?: WorkExperienceSumAggregateInputType
    _min?: WorkExperienceMinAggregateInputType
    _max?: WorkExperienceMaxAggregateInputType
  }

  export type WorkExperienceGroupByOutputType = {
    id: number
    role: string
    company: string
    workField: string
    positionLevel: string | null
    peopleInCharge: string | null
    personId: number
    currentlyWorking: boolean | null
    endWorkDate: Date | null
    salary: string | null
    skills: string[]
    startWorkDate: Date
    task: string | null
    _count: WorkExperienceCountAggregateOutputType | null
    _avg: WorkExperienceAvgAggregateOutputType | null
    _sum: WorkExperienceSumAggregateOutputType | null
    _min: WorkExperienceMinAggregateOutputType | null
    _max: WorkExperienceMaxAggregateOutputType | null
  }

  type GetWorkExperienceGroupByPayload<T extends WorkExperienceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkExperienceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkExperienceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkExperienceGroupByOutputType[P]>
            : GetScalarType<T[P], WorkExperienceGroupByOutputType[P]>
        }
      >
    >


  export type WorkExperienceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    company?: boolean
    workField?: boolean
    positionLevel?: boolean
    peopleInCharge?: boolean
    personId?: boolean
    currentlyWorking?: boolean
    endWorkDate?: boolean
    salary?: boolean
    skills?: boolean
    startWorkDate?: boolean
    task?: boolean
    person?: boolean | PersonDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workExperience"]>

  export type WorkExperienceSelectScalar = {
    id?: boolean
    role?: boolean
    company?: boolean
    workField?: boolean
    positionLevel?: boolean
    peopleInCharge?: boolean
    personId?: boolean
    currentlyWorking?: boolean
    endWorkDate?: boolean
    salary?: boolean
    skills?: boolean
    startWorkDate?: boolean
    task?: boolean
  }

  export type WorkExperienceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    person?: boolean | PersonDefaultArgs<ExtArgs>
  }


  export type $WorkExperiencePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkExperience"
    objects: {
      person: Prisma.$PersonPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      role: string
      company: string
      workField: string
      positionLevel: string | null
      peopleInCharge: string | null
      personId: number
      currentlyWorking: boolean | null
      endWorkDate: Date | null
      salary: string | null
      skills: string[]
      startWorkDate: Date
      task: string | null
    }, ExtArgs["result"]["workExperience"]>
    composites: {}
  }


  type WorkExperienceGetPayload<S extends boolean | null | undefined | WorkExperienceDefaultArgs> = $Result.GetResult<Prisma.$WorkExperiencePayload, S>

  type WorkExperienceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WorkExperienceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WorkExperienceCountAggregateInputType | true
    }

  export interface WorkExperienceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkExperience'], meta: { name: 'WorkExperience' } }
    /**
     * Find zero or one WorkExperience that matches the filter.
     * @param {WorkExperienceFindUniqueArgs} args - Arguments to find a WorkExperience
     * @example
     * // Get one WorkExperience
     * const workExperience = await prisma.workExperience.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WorkExperienceFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, WorkExperienceFindUniqueArgs<ExtArgs>>
    ): Prisma__WorkExperienceClient<$Result.GetResult<Prisma.$WorkExperiencePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one WorkExperience that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {WorkExperienceFindUniqueOrThrowArgs} args - Arguments to find a WorkExperience
     * @example
     * // Get one WorkExperience
     * const workExperience = await prisma.workExperience.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends WorkExperienceFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkExperienceFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__WorkExperienceClient<$Result.GetResult<Prisma.$WorkExperiencePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first WorkExperience that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkExperienceFindFirstArgs} args - Arguments to find a WorkExperience
     * @example
     * // Get one WorkExperience
     * const workExperience = await prisma.workExperience.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WorkExperienceFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkExperienceFindFirstArgs<ExtArgs>>
    ): Prisma__WorkExperienceClient<$Result.GetResult<Prisma.$WorkExperiencePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first WorkExperience that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkExperienceFindFirstOrThrowArgs} args - Arguments to find a WorkExperience
     * @example
     * // Get one WorkExperience
     * const workExperience = await prisma.workExperience.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends WorkExperienceFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkExperienceFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__WorkExperienceClient<$Result.GetResult<Prisma.$WorkExperiencePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more WorkExperiences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkExperienceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkExperiences
     * const workExperiences = await prisma.workExperience.findMany()
     * 
     * // Get first 10 WorkExperiences
     * const workExperiences = await prisma.workExperience.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workExperienceWithIdOnly = await prisma.workExperience.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WorkExperienceFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkExperienceFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkExperiencePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a WorkExperience.
     * @param {WorkExperienceCreateArgs} args - Arguments to create a WorkExperience.
     * @example
     * // Create one WorkExperience
     * const WorkExperience = await prisma.workExperience.create({
     *   data: {
     *     // ... data to create a WorkExperience
     *   }
     * })
     * 
    **/
    create<T extends WorkExperienceCreateArgs<ExtArgs>>(
      args: SelectSubset<T, WorkExperienceCreateArgs<ExtArgs>>
    ): Prisma__WorkExperienceClient<$Result.GetResult<Prisma.$WorkExperiencePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many WorkExperiences.
     *     @param {WorkExperienceCreateManyArgs} args - Arguments to create many WorkExperiences.
     *     @example
     *     // Create many WorkExperiences
     *     const workExperience = await prisma.workExperience.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends WorkExperienceCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkExperienceCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a WorkExperience.
     * @param {WorkExperienceDeleteArgs} args - Arguments to delete one WorkExperience.
     * @example
     * // Delete one WorkExperience
     * const WorkExperience = await prisma.workExperience.delete({
     *   where: {
     *     // ... filter to delete one WorkExperience
     *   }
     * })
     * 
    **/
    delete<T extends WorkExperienceDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, WorkExperienceDeleteArgs<ExtArgs>>
    ): Prisma__WorkExperienceClient<$Result.GetResult<Prisma.$WorkExperiencePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one WorkExperience.
     * @param {WorkExperienceUpdateArgs} args - Arguments to update one WorkExperience.
     * @example
     * // Update one WorkExperience
     * const workExperience = await prisma.workExperience.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WorkExperienceUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, WorkExperienceUpdateArgs<ExtArgs>>
    ): Prisma__WorkExperienceClient<$Result.GetResult<Prisma.$WorkExperiencePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more WorkExperiences.
     * @param {WorkExperienceDeleteManyArgs} args - Arguments to filter WorkExperiences to delete.
     * @example
     * // Delete a few WorkExperiences
     * const { count } = await prisma.workExperience.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WorkExperienceDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WorkExperienceDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkExperiences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkExperienceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkExperiences
     * const workExperience = await prisma.workExperience.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WorkExperienceUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, WorkExperienceUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WorkExperience.
     * @param {WorkExperienceUpsertArgs} args - Arguments to update or create a WorkExperience.
     * @example
     * // Update or create a WorkExperience
     * const workExperience = await prisma.workExperience.upsert({
     *   create: {
     *     // ... data to create a WorkExperience
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkExperience we want to update
     *   }
     * })
    **/
    upsert<T extends WorkExperienceUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, WorkExperienceUpsertArgs<ExtArgs>>
    ): Prisma__WorkExperienceClient<$Result.GetResult<Prisma.$WorkExperiencePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of WorkExperiences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkExperienceCountArgs} args - Arguments to filter WorkExperiences to count.
     * @example
     * // Count the number of WorkExperiences
     * const count = await prisma.workExperience.count({
     *   where: {
     *     // ... the filter for the WorkExperiences we want to count
     *   }
     * })
    **/
    count<T extends WorkExperienceCountArgs>(
      args?: Subset<T, WorkExperienceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkExperienceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkExperience.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkExperienceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkExperienceAggregateArgs>(args: Subset<T, WorkExperienceAggregateArgs>): Prisma.PrismaPromise<GetWorkExperienceAggregateType<T>>

    /**
     * Group by WorkExperience.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkExperienceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkExperienceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkExperienceGroupByArgs['orderBy'] }
        : { orderBy?: WorkExperienceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkExperienceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkExperienceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkExperience model
   */
  readonly fields: WorkExperienceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkExperience.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkExperienceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    person<T extends PersonDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PersonDefaultArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the WorkExperience model
   */ 
  interface WorkExperienceFieldRefs {
    readonly id: FieldRef<"WorkExperience", 'Int'>
    readonly role: FieldRef<"WorkExperience", 'String'>
    readonly company: FieldRef<"WorkExperience", 'String'>
    readonly workField: FieldRef<"WorkExperience", 'String'>
    readonly positionLevel: FieldRef<"WorkExperience", 'String'>
    readonly peopleInCharge: FieldRef<"WorkExperience", 'String'>
    readonly personId: FieldRef<"WorkExperience", 'Int'>
    readonly currentlyWorking: FieldRef<"WorkExperience", 'Boolean'>
    readonly endWorkDate: FieldRef<"WorkExperience", 'DateTime'>
    readonly salary: FieldRef<"WorkExperience", 'String'>
    readonly skills: FieldRef<"WorkExperience", 'String[]'>
    readonly startWorkDate: FieldRef<"WorkExperience", 'DateTime'>
    readonly task: FieldRef<"WorkExperience", 'String'>
  }
    

  // Custom InputTypes

  /**
   * WorkExperience findUnique
   */
  export type WorkExperienceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkExperience
     */
    select?: WorkExperienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkExperienceInclude<ExtArgs> | null
    /**
     * Filter, which WorkExperience to fetch.
     */
    where: WorkExperienceWhereUniqueInput
  }


  /**
   * WorkExperience findUniqueOrThrow
   */
  export type WorkExperienceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkExperience
     */
    select?: WorkExperienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkExperienceInclude<ExtArgs> | null
    /**
     * Filter, which WorkExperience to fetch.
     */
    where: WorkExperienceWhereUniqueInput
  }


  /**
   * WorkExperience findFirst
   */
  export type WorkExperienceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkExperience
     */
    select?: WorkExperienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkExperienceInclude<ExtArgs> | null
    /**
     * Filter, which WorkExperience to fetch.
     */
    where?: WorkExperienceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkExperiences to fetch.
     */
    orderBy?: WorkExperienceOrderByWithRelationAndSearchRelevanceInput | WorkExperienceOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkExperiences.
     */
    cursor?: WorkExperienceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkExperiences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkExperiences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkExperiences.
     */
    distinct?: WorkExperienceScalarFieldEnum | WorkExperienceScalarFieldEnum[]
  }


  /**
   * WorkExperience findFirstOrThrow
   */
  export type WorkExperienceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkExperience
     */
    select?: WorkExperienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkExperienceInclude<ExtArgs> | null
    /**
     * Filter, which WorkExperience to fetch.
     */
    where?: WorkExperienceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkExperiences to fetch.
     */
    orderBy?: WorkExperienceOrderByWithRelationAndSearchRelevanceInput | WorkExperienceOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkExperiences.
     */
    cursor?: WorkExperienceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkExperiences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkExperiences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkExperiences.
     */
    distinct?: WorkExperienceScalarFieldEnum | WorkExperienceScalarFieldEnum[]
  }


  /**
   * WorkExperience findMany
   */
  export type WorkExperienceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkExperience
     */
    select?: WorkExperienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkExperienceInclude<ExtArgs> | null
    /**
     * Filter, which WorkExperiences to fetch.
     */
    where?: WorkExperienceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkExperiences to fetch.
     */
    orderBy?: WorkExperienceOrderByWithRelationAndSearchRelevanceInput | WorkExperienceOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkExperiences.
     */
    cursor?: WorkExperienceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkExperiences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkExperiences.
     */
    skip?: number
    distinct?: WorkExperienceScalarFieldEnum | WorkExperienceScalarFieldEnum[]
  }


  /**
   * WorkExperience create
   */
  export type WorkExperienceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkExperience
     */
    select?: WorkExperienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkExperienceInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkExperience.
     */
    data: XOR<WorkExperienceCreateInput, WorkExperienceUncheckedCreateInput>
  }


  /**
   * WorkExperience createMany
   */
  export type WorkExperienceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkExperiences.
     */
    data: WorkExperienceCreateManyInput | WorkExperienceCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * WorkExperience update
   */
  export type WorkExperienceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkExperience
     */
    select?: WorkExperienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkExperienceInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkExperience.
     */
    data: XOR<WorkExperienceUpdateInput, WorkExperienceUncheckedUpdateInput>
    /**
     * Choose, which WorkExperience to update.
     */
    where: WorkExperienceWhereUniqueInput
  }


  /**
   * WorkExperience updateMany
   */
  export type WorkExperienceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkExperiences.
     */
    data: XOR<WorkExperienceUpdateManyMutationInput, WorkExperienceUncheckedUpdateManyInput>
    /**
     * Filter which WorkExperiences to update
     */
    where?: WorkExperienceWhereInput
  }


  /**
   * WorkExperience upsert
   */
  export type WorkExperienceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkExperience
     */
    select?: WorkExperienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkExperienceInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkExperience to update in case it exists.
     */
    where: WorkExperienceWhereUniqueInput
    /**
     * In case the WorkExperience found by the `where` argument doesn't exist, create a new WorkExperience with this data.
     */
    create: XOR<WorkExperienceCreateInput, WorkExperienceUncheckedCreateInput>
    /**
     * In case the WorkExperience was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkExperienceUpdateInput, WorkExperienceUncheckedUpdateInput>
  }


  /**
   * WorkExperience delete
   */
  export type WorkExperienceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkExperience
     */
    select?: WorkExperienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkExperienceInclude<ExtArgs> | null
    /**
     * Filter which WorkExperience to delete.
     */
    where: WorkExperienceWhereUniqueInput
  }


  /**
   * WorkExperience deleteMany
   */
  export type WorkExperienceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkExperiences to delete
     */
    where?: WorkExperienceWhereInput
  }


  /**
   * WorkExperience without action
   */
  export type WorkExperienceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkExperience
     */
    select?: WorkExperienceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WorkExperienceInclude<ExtArgs> | null
  }



  /**
   * Model Companies
   */

  export type AggregateCompanies = {
    _count: CompaniesCountAggregateOutputType | null
    _avg: CompaniesAvgAggregateOutputType | null
    _sum: CompaniesSumAggregateOutputType | null
    _min: CompaniesMinAggregateOutputType | null
    _max: CompaniesMaxAggregateOutputType | null
  }

  export type CompaniesAvgAggregateOutputType = {
    id: number | null
  }

  export type CompaniesSumAggregateOutputType = {
    id: number | null
  }

  export type CompaniesMinAggregateOutputType = {
    id: number | null
    companyName: string | null
    name: string | null
    surname: string | null
    companyEmail: string | null
    companyPhone: string | null
    companyWebsite: string | null
    howCanWeHelp: string | null
    termsAndConditions: boolean | null
  }

  export type CompaniesMaxAggregateOutputType = {
    id: number | null
    companyName: string | null
    name: string | null
    surname: string | null
    companyEmail: string | null
    companyPhone: string | null
    companyWebsite: string | null
    howCanWeHelp: string | null
    termsAndConditions: boolean | null
  }

  export type CompaniesCountAggregateOutputType = {
    id: number
    companyName: number
    name: number
    surname: number
    companyEmail: number
    companyPhone: number
    companyWebsite: number
    howCanWeHelp: number
    termsAndConditions: number
    _all: number
  }


  export type CompaniesAvgAggregateInputType = {
    id?: true
  }

  export type CompaniesSumAggregateInputType = {
    id?: true
  }

  export type CompaniesMinAggregateInputType = {
    id?: true
    companyName?: true
    name?: true
    surname?: true
    companyEmail?: true
    companyPhone?: true
    companyWebsite?: true
    howCanWeHelp?: true
    termsAndConditions?: true
  }

  export type CompaniesMaxAggregateInputType = {
    id?: true
    companyName?: true
    name?: true
    surname?: true
    companyEmail?: true
    companyPhone?: true
    companyWebsite?: true
    howCanWeHelp?: true
    termsAndConditions?: true
  }

  export type CompaniesCountAggregateInputType = {
    id?: true
    companyName?: true
    name?: true
    surname?: true
    companyEmail?: true
    companyPhone?: true
    companyWebsite?: true
    howCanWeHelp?: true
    termsAndConditions?: true
    _all?: true
  }

  export type CompaniesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Companies to aggregate.
     */
    where?: CompaniesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompaniesOrderByWithRelationAndSearchRelevanceInput | CompaniesOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompaniesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Companies
    **/
    _count?: true | CompaniesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompaniesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompaniesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompaniesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompaniesMaxAggregateInputType
  }

  export type GetCompaniesAggregateType<T extends CompaniesAggregateArgs> = {
        [P in keyof T & keyof AggregateCompanies]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompanies[P]>
      : GetScalarType<T[P], AggregateCompanies[P]>
  }




  export type CompaniesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompaniesWhereInput
    orderBy?: CompaniesOrderByWithAggregationInput | CompaniesOrderByWithAggregationInput[]
    by: CompaniesScalarFieldEnum[] | CompaniesScalarFieldEnum
    having?: CompaniesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompaniesCountAggregateInputType | true
    _avg?: CompaniesAvgAggregateInputType
    _sum?: CompaniesSumAggregateInputType
    _min?: CompaniesMinAggregateInputType
    _max?: CompaniesMaxAggregateInputType
  }

  export type CompaniesGroupByOutputType = {
    id: number
    companyName: string
    name: string
    surname: string
    companyEmail: string
    companyPhone: string
    companyWebsite: string | null
    howCanWeHelp: string | null
    termsAndConditions: boolean
    _count: CompaniesCountAggregateOutputType | null
    _avg: CompaniesAvgAggregateOutputType | null
    _sum: CompaniesSumAggregateOutputType | null
    _min: CompaniesMinAggregateOutputType | null
    _max: CompaniesMaxAggregateOutputType | null
  }

  type GetCompaniesGroupByPayload<T extends CompaniesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompaniesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompaniesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompaniesGroupByOutputType[P]>
            : GetScalarType<T[P], CompaniesGroupByOutputType[P]>
        }
      >
    >


  export type CompaniesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyName?: boolean
    name?: boolean
    surname?: boolean
    companyEmail?: boolean
    companyPhone?: boolean
    companyWebsite?: boolean
    howCanWeHelp?: boolean
    termsAndConditions?: boolean
  }, ExtArgs["result"]["companies"]>

  export type CompaniesSelectScalar = {
    id?: boolean
    companyName?: boolean
    name?: boolean
    surname?: boolean
    companyEmail?: boolean
    companyPhone?: boolean
    companyWebsite?: boolean
    howCanWeHelp?: boolean
    termsAndConditions?: boolean
  }


  export type $CompaniesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Companies"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      companyName: string
      name: string
      surname: string
      companyEmail: string
      companyPhone: string
      companyWebsite: string | null
      howCanWeHelp: string | null
      termsAndConditions: boolean
    }, ExtArgs["result"]["companies"]>
    composites: {}
  }


  type CompaniesGetPayload<S extends boolean | null | undefined | CompaniesDefaultArgs> = $Result.GetResult<Prisma.$CompaniesPayload, S>

  type CompaniesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CompaniesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CompaniesCountAggregateInputType | true
    }

  export interface CompaniesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Companies'], meta: { name: 'Companies' } }
    /**
     * Find zero or one Companies that matches the filter.
     * @param {CompaniesFindUniqueArgs} args - Arguments to find a Companies
     * @example
     * // Get one Companies
     * const companies = await prisma.companies.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CompaniesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CompaniesFindUniqueArgs<ExtArgs>>
    ): Prisma__CompaniesClient<$Result.GetResult<Prisma.$CompaniesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Companies that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CompaniesFindUniqueOrThrowArgs} args - Arguments to find a Companies
     * @example
     * // Get one Companies
     * const companies = await prisma.companies.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CompaniesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CompaniesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CompaniesClient<$Result.GetResult<Prisma.$CompaniesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Companies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompaniesFindFirstArgs} args - Arguments to find a Companies
     * @example
     * // Get one Companies
     * const companies = await prisma.companies.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CompaniesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CompaniesFindFirstArgs<ExtArgs>>
    ): Prisma__CompaniesClient<$Result.GetResult<Prisma.$CompaniesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Companies that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompaniesFindFirstOrThrowArgs} args - Arguments to find a Companies
     * @example
     * // Get one Companies
     * const companies = await prisma.companies.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CompaniesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CompaniesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CompaniesClient<$Result.GetResult<Prisma.$CompaniesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Companies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompaniesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Companies
     * const companies = await prisma.companies.findMany()
     * 
     * // Get first 10 Companies
     * const companies = await prisma.companies.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const companiesWithIdOnly = await prisma.companies.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CompaniesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CompaniesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompaniesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Companies.
     * @param {CompaniesCreateArgs} args - Arguments to create a Companies.
     * @example
     * // Create one Companies
     * const Companies = await prisma.companies.create({
     *   data: {
     *     // ... data to create a Companies
     *   }
     * })
     * 
    **/
    create<T extends CompaniesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CompaniesCreateArgs<ExtArgs>>
    ): Prisma__CompaniesClient<$Result.GetResult<Prisma.$CompaniesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Companies.
     *     @param {CompaniesCreateManyArgs} args - Arguments to create many Companies.
     *     @example
     *     // Create many Companies
     *     const companies = await prisma.companies.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CompaniesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CompaniesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Companies.
     * @param {CompaniesDeleteArgs} args - Arguments to delete one Companies.
     * @example
     * // Delete one Companies
     * const Companies = await prisma.companies.delete({
     *   where: {
     *     // ... filter to delete one Companies
     *   }
     * })
     * 
    **/
    delete<T extends CompaniesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CompaniesDeleteArgs<ExtArgs>>
    ): Prisma__CompaniesClient<$Result.GetResult<Prisma.$CompaniesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Companies.
     * @param {CompaniesUpdateArgs} args - Arguments to update one Companies.
     * @example
     * // Update one Companies
     * const companies = await prisma.companies.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CompaniesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CompaniesUpdateArgs<ExtArgs>>
    ): Prisma__CompaniesClient<$Result.GetResult<Prisma.$CompaniesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Companies.
     * @param {CompaniesDeleteManyArgs} args - Arguments to filter Companies to delete.
     * @example
     * // Delete a few Companies
     * const { count } = await prisma.companies.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CompaniesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CompaniesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompaniesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Companies
     * const companies = await prisma.companies.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CompaniesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CompaniesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Companies.
     * @param {CompaniesUpsertArgs} args - Arguments to update or create a Companies.
     * @example
     * // Update or create a Companies
     * const companies = await prisma.companies.upsert({
     *   create: {
     *     // ... data to create a Companies
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Companies we want to update
     *   }
     * })
    **/
    upsert<T extends CompaniesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CompaniesUpsertArgs<ExtArgs>>
    ): Prisma__CompaniesClient<$Result.GetResult<Prisma.$CompaniesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompaniesCountArgs} args - Arguments to filter Companies to count.
     * @example
     * // Count the number of Companies
     * const count = await prisma.companies.count({
     *   where: {
     *     // ... the filter for the Companies we want to count
     *   }
     * })
    **/
    count<T extends CompaniesCountArgs>(
      args?: Subset<T, CompaniesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompaniesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompaniesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompaniesAggregateArgs>(args: Subset<T, CompaniesAggregateArgs>): Prisma.PrismaPromise<GetCompaniesAggregateType<T>>

    /**
     * Group by Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompaniesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompaniesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompaniesGroupByArgs['orderBy'] }
        : { orderBy?: CompaniesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompaniesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompaniesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Companies model
   */
  readonly fields: CompaniesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Companies.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompaniesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Companies model
   */ 
  interface CompaniesFieldRefs {
    readonly id: FieldRef<"Companies", 'Int'>
    readonly companyName: FieldRef<"Companies", 'String'>
    readonly name: FieldRef<"Companies", 'String'>
    readonly surname: FieldRef<"Companies", 'String'>
    readonly companyEmail: FieldRef<"Companies", 'String'>
    readonly companyPhone: FieldRef<"Companies", 'String'>
    readonly companyWebsite: FieldRef<"Companies", 'String'>
    readonly howCanWeHelp: FieldRef<"Companies", 'String'>
    readonly termsAndConditions: FieldRef<"Companies", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Companies findUnique
   */
  export type CompaniesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Companies
     */
    select?: CompaniesSelect<ExtArgs> | null
    /**
     * Filter, which Companies to fetch.
     */
    where: CompaniesWhereUniqueInput
  }


  /**
   * Companies findUniqueOrThrow
   */
  export type CompaniesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Companies
     */
    select?: CompaniesSelect<ExtArgs> | null
    /**
     * Filter, which Companies to fetch.
     */
    where: CompaniesWhereUniqueInput
  }


  /**
   * Companies findFirst
   */
  export type CompaniesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Companies
     */
    select?: CompaniesSelect<ExtArgs> | null
    /**
     * Filter, which Companies to fetch.
     */
    where?: CompaniesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompaniesOrderByWithRelationAndSearchRelevanceInput | CompaniesOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompaniesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompaniesScalarFieldEnum | CompaniesScalarFieldEnum[]
  }


  /**
   * Companies findFirstOrThrow
   */
  export type CompaniesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Companies
     */
    select?: CompaniesSelect<ExtArgs> | null
    /**
     * Filter, which Companies to fetch.
     */
    where?: CompaniesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompaniesOrderByWithRelationAndSearchRelevanceInput | CompaniesOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompaniesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompaniesScalarFieldEnum | CompaniesScalarFieldEnum[]
  }


  /**
   * Companies findMany
   */
  export type CompaniesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Companies
     */
    select?: CompaniesSelect<ExtArgs> | null
    /**
     * Filter, which Companies to fetch.
     */
    where?: CompaniesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompaniesOrderByWithRelationAndSearchRelevanceInput | CompaniesOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Companies.
     */
    cursor?: CompaniesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    distinct?: CompaniesScalarFieldEnum | CompaniesScalarFieldEnum[]
  }


  /**
   * Companies create
   */
  export type CompaniesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Companies
     */
    select?: CompaniesSelect<ExtArgs> | null
    /**
     * The data needed to create a Companies.
     */
    data: XOR<CompaniesCreateInput, CompaniesUncheckedCreateInput>
  }


  /**
   * Companies createMany
   */
  export type CompaniesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Companies.
     */
    data: CompaniesCreateManyInput | CompaniesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Companies update
   */
  export type CompaniesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Companies
     */
    select?: CompaniesSelect<ExtArgs> | null
    /**
     * The data needed to update a Companies.
     */
    data: XOR<CompaniesUpdateInput, CompaniesUncheckedUpdateInput>
    /**
     * Choose, which Companies to update.
     */
    where: CompaniesWhereUniqueInput
  }


  /**
   * Companies updateMany
   */
  export type CompaniesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Companies.
     */
    data: XOR<CompaniesUpdateManyMutationInput, CompaniesUncheckedUpdateManyInput>
    /**
     * Filter which Companies to update
     */
    where?: CompaniesWhereInput
  }


  /**
   * Companies upsert
   */
  export type CompaniesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Companies
     */
    select?: CompaniesSelect<ExtArgs> | null
    /**
     * The filter to search for the Companies to update in case it exists.
     */
    where: CompaniesWhereUniqueInput
    /**
     * In case the Companies found by the `where` argument doesn't exist, create a new Companies with this data.
     */
    create: XOR<CompaniesCreateInput, CompaniesUncheckedCreateInput>
    /**
     * In case the Companies was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompaniesUpdateInput, CompaniesUncheckedUpdateInput>
  }


  /**
   * Companies delete
   */
  export type CompaniesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Companies
     */
    select?: CompaniesSelect<ExtArgs> | null
    /**
     * Filter which Companies to delete.
     */
    where: CompaniesWhereUniqueInput
  }


  /**
   * Companies deleteMany
   */
  export type CompaniesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Companies to delete
     */
    where?: CompaniesWhereInput
  }


  /**
   * Companies without action
   */
  export type CompaniesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Companies
     */
    select?: CompaniesSelect<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const PersonScalarFieldEnum: {
    id: 'id',
    dni: 'dni',
    dniNumber: 'dniNumber',
    birthday: 'birthday',
    name: 'name',
    surname: 'surname',
    about: 'about',
    address: 'address',
    cp: 'cp',
    email: 'email',
    phone: 'phone',
    cityPD: 'cityPD',
    countyPD: 'countyPD',
    gender: 'gender',
    liveAbroad: 'liveAbroad',
    currentCountry: 'currentCountry',
    currentCity: 'currentCity'
  };

  export type PersonScalarFieldEnum = (typeof PersonScalarFieldEnum)[keyof typeof PersonScalarFieldEnum]


  export const LanguageScalarFieldEnum: {
    id: 'id',
    languageName: 'languageName',
    spokenLevel: 'spokenLevel',
    readLevel: 'readLevel',
    writtenLevel: 'writtenLevel',
    personId: 'personId'
  };

  export type LanguageScalarFieldEnum = (typeof LanguageScalarFieldEnum)[keyof typeof LanguageScalarFieldEnum]


  export const ReferenceScalarFieldEnum: {
    id: 'id',
    referenceName: 'referenceName',
    referenceSurname: 'referenceSurname',
    referencePhone: 'referencePhone',
    referenceCompany: 'referenceCompany',
    personId: 'personId',
    referenceRole: 'referenceRole',
    referenceType: 'referenceType'
  };

  export type ReferenceScalarFieldEnum = (typeof ReferenceScalarFieldEnum)[keyof typeof ReferenceScalarFieldEnum]


  export const StudyScalarFieldEnum: {
    id: 'id',
    level: 'level',
    title: 'title',
    institute: 'institute',
    fieldOfStudy: 'fieldOfStudy',
    startStudyDate: 'startStudyDate',
    personId: 'personId',
    currentlyStudying: 'currentlyStudying',
    studySitutation: 'studySitutation',
    cityStudy: 'cityStudy',
    countyStudy: 'countyStudy',
    endStudyDate: 'endStudyDate'
  };

  export type StudyScalarFieldEnum = (typeof StudyScalarFieldEnum)[keyof typeof StudyScalarFieldEnum]


  export const WorkExperienceScalarFieldEnum: {
    id: 'id',
    role: 'role',
    company: 'company',
    workField: 'workField',
    positionLevel: 'positionLevel',
    peopleInCharge: 'peopleInCharge',
    personId: 'personId',
    currentlyWorking: 'currentlyWorking',
    endWorkDate: 'endWorkDate',
    salary: 'salary',
    skills: 'skills',
    startWorkDate: 'startWorkDate',
    task: 'task'
  };

  export type WorkExperienceScalarFieldEnum = (typeof WorkExperienceScalarFieldEnum)[keyof typeof WorkExperienceScalarFieldEnum]


  export const CompaniesScalarFieldEnum: {
    id: 'id',
    companyName: 'companyName',
    name: 'name',
    surname: 'surname',
    companyEmail: 'companyEmail',
    companyPhone: 'companyPhone',
    companyWebsite: 'companyWebsite',
    howCanWeHelp: 'howCanWeHelp',
    termsAndConditions: 'termsAndConditions'
  };

  export type CompaniesScalarFieldEnum = (typeof CompaniesScalarFieldEnum)[keyof typeof CompaniesScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const PersonOrderByRelevanceFieldEnum: {
    dni: 'dni',
    dniNumber: 'dniNumber',
    name: 'name',
    surname: 'surname',
    about: 'about',
    address: 'address',
    cp: 'cp',
    email: 'email',
    phone: 'phone',
    cityPD: 'cityPD',
    countyPD: 'countyPD',
    gender: 'gender',
    currentCountry: 'currentCountry',
    currentCity: 'currentCity'
  };

  export type PersonOrderByRelevanceFieldEnum = (typeof PersonOrderByRelevanceFieldEnum)[keyof typeof PersonOrderByRelevanceFieldEnum]


  export const LanguageOrderByRelevanceFieldEnum: {
    languageName: 'languageName'
  };

  export type LanguageOrderByRelevanceFieldEnum = (typeof LanguageOrderByRelevanceFieldEnum)[keyof typeof LanguageOrderByRelevanceFieldEnum]


  export const ReferenceOrderByRelevanceFieldEnum: {
    referenceName: 'referenceName',
    referenceSurname: 'referenceSurname',
    referencePhone: 'referencePhone',
    referenceCompany: 'referenceCompany',
    referenceRole: 'referenceRole',
    referenceType: 'referenceType'
  };

  export type ReferenceOrderByRelevanceFieldEnum = (typeof ReferenceOrderByRelevanceFieldEnum)[keyof typeof ReferenceOrderByRelevanceFieldEnum]


  export const StudyOrderByRelevanceFieldEnum: {
    level: 'level',
    title: 'title',
    institute: 'institute',
    fieldOfStudy: 'fieldOfStudy',
    studySitutation: 'studySitutation',
    cityStudy: 'cityStudy',
    countyStudy: 'countyStudy'
  };

  export type StudyOrderByRelevanceFieldEnum = (typeof StudyOrderByRelevanceFieldEnum)[keyof typeof StudyOrderByRelevanceFieldEnum]


  export const WorkExperienceOrderByRelevanceFieldEnum: {
    role: 'role',
    company: 'company',
    workField: 'workField',
    positionLevel: 'positionLevel',
    peopleInCharge: 'peopleInCharge',
    salary: 'salary',
    skills: 'skills',
    task: 'task'
  };

  export type WorkExperienceOrderByRelevanceFieldEnum = (typeof WorkExperienceOrderByRelevanceFieldEnum)[keyof typeof WorkExperienceOrderByRelevanceFieldEnum]


  export const CompaniesOrderByRelevanceFieldEnum: {
    companyName: 'companyName',
    name: 'name',
    surname: 'surname',
    companyEmail: 'companyEmail',
    companyPhone: 'companyPhone',
    companyWebsite: 'companyWebsite',
    howCanWeHelp: 'howCanWeHelp'
  };

  export type CompaniesOrderByRelevanceFieldEnum = (typeof CompaniesOrderByRelevanceFieldEnum)[keyof typeof CompaniesOrderByRelevanceFieldEnum]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type PersonWhereInput = {
    AND?: PersonWhereInput | PersonWhereInput[]
    OR?: PersonWhereInput[]
    NOT?: PersonWhereInput | PersonWhereInput[]
    id?: IntFilter<"Person"> | number
    dni?: StringFilter<"Person"> | string
    dniNumber?: StringFilter<"Person"> | string
    birthday?: DateTimeFilter<"Person"> | Date | string
    name?: StringFilter<"Person"> | string
    surname?: StringFilter<"Person"> | string
    about?: StringFilter<"Person"> | string
    address?: StringFilter<"Person"> | string
    cp?: StringNullableFilter<"Person"> | string | null
    email?: StringFilter<"Person"> | string
    phone?: StringFilter<"Person"> | string
    cityPD?: StringNullableFilter<"Person"> | string | null
    countyPD?: StringNullableFilter<"Person"> | string | null
    gender?: StringNullableFilter<"Person"> | string | null
    liveAbroad?: BoolNullableFilter<"Person"> | boolean | null
    currentCountry?: StringNullableFilter<"Person"> | string | null
    currentCity?: StringNullableFilter<"Person"> | string | null
    languages?: LanguageListRelationFilter
    references?: ReferenceListRelationFilter
    studies?: StudyListRelationFilter
    workExperiences?: WorkExperienceListRelationFilter
  }

  export type PersonOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    dni?: SortOrder
    dniNumber?: SortOrder
    birthday?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    about?: SortOrder
    address?: SortOrder
    cp?: SortOrderInput | SortOrder
    email?: SortOrder
    phone?: SortOrder
    cityPD?: SortOrderInput | SortOrder
    countyPD?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    liveAbroad?: SortOrderInput | SortOrder
    currentCountry?: SortOrderInput | SortOrder
    currentCity?: SortOrderInput | SortOrder
    languages?: LanguageOrderByRelationAggregateInput
    references?: ReferenceOrderByRelationAggregateInput
    studies?: StudyOrderByRelationAggregateInput
    workExperiences?: WorkExperienceOrderByRelationAggregateInput
    _relevance?: PersonOrderByRelevanceInput
  }

  export type PersonWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PersonWhereInput | PersonWhereInput[]
    OR?: PersonWhereInput[]
    NOT?: PersonWhereInput | PersonWhereInput[]
    dni?: StringFilter<"Person"> | string
    dniNumber?: StringFilter<"Person"> | string
    birthday?: DateTimeFilter<"Person"> | Date | string
    name?: StringFilter<"Person"> | string
    surname?: StringFilter<"Person"> | string
    about?: StringFilter<"Person"> | string
    address?: StringFilter<"Person"> | string
    cp?: StringNullableFilter<"Person"> | string | null
    email?: StringFilter<"Person"> | string
    phone?: StringFilter<"Person"> | string
    cityPD?: StringNullableFilter<"Person"> | string | null
    countyPD?: StringNullableFilter<"Person"> | string | null
    gender?: StringNullableFilter<"Person"> | string | null
    liveAbroad?: BoolNullableFilter<"Person"> | boolean | null
    currentCountry?: StringNullableFilter<"Person"> | string | null
    currentCity?: StringNullableFilter<"Person"> | string | null
    languages?: LanguageListRelationFilter
    references?: ReferenceListRelationFilter
    studies?: StudyListRelationFilter
    workExperiences?: WorkExperienceListRelationFilter
  }, "id">

  export type PersonOrderByWithAggregationInput = {
    id?: SortOrder
    dni?: SortOrder
    dniNumber?: SortOrder
    birthday?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    about?: SortOrder
    address?: SortOrder
    cp?: SortOrderInput | SortOrder
    email?: SortOrder
    phone?: SortOrder
    cityPD?: SortOrderInput | SortOrder
    countyPD?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    liveAbroad?: SortOrderInput | SortOrder
    currentCountry?: SortOrderInput | SortOrder
    currentCity?: SortOrderInput | SortOrder
    _count?: PersonCountOrderByAggregateInput
    _avg?: PersonAvgOrderByAggregateInput
    _max?: PersonMaxOrderByAggregateInput
    _min?: PersonMinOrderByAggregateInput
    _sum?: PersonSumOrderByAggregateInput
  }

  export type PersonScalarWhereWithAggregatesInput = {
    AND?: PersonScalarWhereWithAggregatesInput | PersonScalarWhereWithAggregatesInput[]
    OR?: PersonScalarWhereWithAggregatesInput[]
    NOT?: PersonScalarWhereWithAggregatesInput | PersonScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Person"> | number
    dni?: StringWithAggregatesFilter<"Person"> | string
    dniNumber?: StringWithAggregatesFilter<"Person"> | string
    birthday?: DateTimeWithAggregatesFilter<"Person"> | Date | string
    name?: StringWithAggregatesFilter<"Person"> | string
    surname?: StringWithAggregatesFilter<"Person"> | string
    about?: StringWithAggregatesFilter<"Person"> | string
    address?: StringWithAggregatesFilter<"Person"> | string
    cp?: StringNullableWithAggregatesFilter<"Person"> | string | null
    email?: StringWithAggregatesFilter<"Person"> | string
    phone?: StringWithAggregatesFilter<"Person"> | string
    cityPD?: StringNullableWithAggregatesFilter<"Person"> | string | null
    countyPD?: StringNullableWithAggregatesFilter<"Person"> | string | null
    gender?: StringNullableWithAggregatesFilter<"Person"> | string | null
    liveAbroad?: BoolNullableWithAggregatesFilter<"Person"> | boolean | null
    currentCountry?: StringNullableWithAggregatesFilter<"Person"> | string | null
    currentCity?: StringNullableWithAggregatesFilter<"Person"> | string | null
  }

  export type LanguageWhereInput = {
    AND?: LanguageWhereInput | LanguageWhereInput[]
    OR?: LanguageWhereInput[]
    NOT?: LanguageWhereInput | LanguageWhereInput[]
    id?: IntFilter<"Language"> | number
    languageName?: StringFilter<"Language"> | string
    spokenLevel?: IntFilter<"Language"> | number
    readLevel?: IntFilter<"Language"> | number
    writtenLevel?: IntFilter<"Language"> | number
    personId?: IntFilter<"Language"> | number
    person?: XOR<PersonRelationFilter, PersonWhereInput>
  }

  export type LanguageOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    languageName?: SortOrder
    spokenLevel?: SortOrder
    readLevel?: SortOrder
    writtenLevel?: SortOrder
    personId?: SortOrder
    person?: PersonOrderByWithRelationAndSearchRelevanceInput
    _relevance?: LanguageOrderByRelevanceInput
  }

  export type LanguageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LanguageWhereInput | LanguageWhereInput[]
    OR?: LanguageWhereInput[]
    NOT?: LanguageWhereInput | LanguageWhereInput[]
    languageName?: StringFilter<"Language"> | string
    spokenLevel?: IntFilter<"Language"> | number
    readLevel?: IntFilter<"Language"> | number
    writtenLevel?: IntFilter<"Language"> | number
    personId?: IntFilter<"Language"> | number
    person?: XOR<PersonRelationFilter, PersonWhereInput>
  }, "id">

  export type LanguageOrderByWithAggregationInput = {
    id?: SortOrder
    languageName?: SortOrder
    spokenLevel?: SortOrder
    readLevel?: SortOrder
    writtenLevel?: SortOrder
    personId?: SortOrder
    _count?: LanguageCountOrderByAggregateInput
    _avg?: LanguageAvgOrderByAggregateInput
    _max?: LanguageMaxOrderByAggregateInput
    _min?: LanguageMinOrderByAggregateInput
    _sum?: LanguageSumOrderByAggregateInput
  }

  export type LanguageScalarWhereWithAggregatesInput = {
    AND?: LanguageScalarWhereWithAggregatesInput | LanguageScalarWhereWithAggregatesInput[]
    OR?: LanguageScalarWhereWithAggregatesInput[]
    NOT?: LanguageScalarWhereWithAggregatesInput | LanguageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Language"> | number
    languageName?: StringWithAggregatesFilter<"Language"> | string
    spokenLevel?: IntWithAggregatesFilter<"Language"> | number
    readLevel?: IntWithAggregatesFilter<"Language"> | number
    writtenLevel?: IntWithAggregatesFilter<"Language"> | number
    personId?: IntWithAggregatesFilter<"Language"> | number
  }

  export type ReferenceWhereInput = {
    AND?: ReferenceWhereInput | ReferenceWhereInput[]
    OR?: ReferenceWhereInput[]
    NOT?: ReferenceWhereInput | ReferenceWhereInput[]
    id?: IntFilter<"Reference"> | number
    referenceName?: StringFilter<"Reference"> | string
    referenceSurname?: StringFilter<"Reference"> | string
    referencePhone?: StringFilter<"Reference"> | string
    referenceCompany?: StringNullableFilter<"Reference"> | string | null
    personId?: IntFilter<"Reference"> | number
    referenceRole?: StringNullableFilter<"Reference"> | string | null
    referenceType?: StringFilter<"Reference"> | string
    person?: XOR<PersonRelationFilter, PersonWhereInput>
  }

  export type ReferenceOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    referenceName?: SortOrder
    referenceSurname?: SortOrder
    referencePhone?: SortOrder
    referenceCompany?: SortOrderInput | SortOrder
    personId?: SortOrder
    referenceRole?: SortOrderInput | SortOrder
    referenceType?: SortOrder
    person?: PersonOrderByWithRelationAndSearchRelevanceInput
    _relevance?: ReferenceOrderByRelevanceInput
  }

  export type ReferenceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ReferenceWhereInput | ReferenceWhereInput[]
    OR?: ReferenceWhereInput[]
    NOT?: ReferenceWhereInput | ReferenceWhereInput[]
    referenceName?: StringFilter<"Reference"> | string
    referenceSurname?: StringFilter<"Reference"> | string
    referencePhone?: StringFilter<"Reference"> | string
    referenceCompany?: StringNullableFilter<"Reference"> | string | null
    personId?: IntFilter<"Reference"> | number
    referenceRole?: StringNullableFilter<"Reference"> | string | null
    referenceType?: StringFilter<"Reference"> | string
    person?: XOR<PersonRelationFilter, PersonWhereInput>
  }, "id">

  export type ReferenceOrderByWithAggregationInput = {
    id?: SortOrder
    referenceName?: SortOrder
    referenceSurname?: SortOrder
    referencePhone?: SortOrder
    referenceCompany?: SortOrderInput | SortOrder
    personId?: SortOrder
    referenceRole?: SortOrderInput | SortOrder
    referenceType?: SortOrder
    _count?: ReferenceCountOrderByAggregateInput
    _avg?: ReferenceAvgOrderByAggregateInput
    _max?: ReferenceMaxOrderByAggregateInput
    _min?: ReferenceMinOrderByAggregateInput
    _sum?: ReferenceSumOrderByAggregateInput
  }

  export type ReferenceScalarWhereWithAggregatesInput = {
    AND?: ReferenceScalarWhereWithAggregatesInput | ReferenceScalarWhereWithAggregatesInput[]
    OR?: ReferenceScalarWhereWithAggregatesInput[]
    NOT?: ReferenceScalarWhereWithAggregatesInput | ReferenceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Reference"> | number
    referenceName?: StringWithAggregatesFilter<"Reference"> | string
    referenceSurname?: StringWithAggregatesFilter<"Reference"> | string
    referencePhone?: StringWithAggregatesFilter<"Reference"> | string
    referenceCompany?: StringNullableWithAggregatesFilter<"Reference"> | string | null
    personId?: IntWithAggregatesFilter<"Reference"> | number
    referenceRole?: StringNullableWithAggregatesFilter<"Reference"> | string | null
    referenceType?: StringWithAggregatesFilter<"Reference"> | string
  }

  export type StudyWhereInput = {
    AND?: StudyWhereInput | StudyWhereInput[]
    OR?: StudyWhereInput[]
    NOT?: StudyWhereInput | StudyWhereInput[]
    id?: IntFilter<"Study"> | number
    level?: StringFilter<"Study"> | string
    title?: StringFilter<"Study"> | string
    institute?: StringFilter<"Study"> | string
    fieldOfStudy?: StringFilter<"Study"> | string
    startStudyDate?: DateTimeFilter<"Study"> | Date | string
    personId?: IntFilter<"Study"> | number
    currentlyStudying?: BoolNullableFilter<"Study"> | boolean | null
    studySitutation?: StringNullableFilter<"Study"> | string | null
    cityStudy?: StringNullableFilter<"Study"> | string | null
    countyStudy?: StringNullableFilter<"Study"> | string | null
    endStudyDate?: DateTimeNullableFilter<"Study"> | Date | string | null
    person?: XOR<PersonRelationFilter, PersonWhereInput>
  }

  export type StudyOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    level?: SortOrder
    title?: SortOrder
    institute?: SortOrder
    fieldOfStudy?: SortOrder
    startStudyDate?: SortOrder
    personId?: SortOrder
    currentlyStudying?: SortOrderInput | SortOrder
    studySitutation?: SortOrderInput | SortOrder
    cityStudy?: SortOrderInput | SortOrder
    countyStudy?: SortOrderInput | SortOrder
    endStudyDate?: SortOrderInput | SortOrder
    person?: PersonOrderByWithRelationAndSearchRelevanceInput
    _relevance?: StudyOrderByRelevanceInput
  }

  export type StudyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: StudyWhereInput | StudyWhereInput[]
    OR?: StudyWhereInput[]
    NOT?: StudyWhereInput | StudyWhereInput[]
    level?: StringFilter<"Study"> | string
    title?: StringFilter<"Study"> | string
    institute?: StringFilter<"Study"> | string
    fieldOfStudy?: StringFilter<"Study"> | string
    startStudyDate?: DateTimeFilter<"Study"> | Date | string
    personId?: IntFilter<"Study"> | number
    currentlyStudying?: BoolNullableFilter<"Study"> | boolean | null
    studySitutation?: StringNullableFilter<"Study"> | string | null
    cityStudy?: StringNullableFilter<"Study"> | string | null
    countyStudy?: StringNullableFilter<"Study"> | string | null
    endStudyDate?: DateTimeNullableFilter<"Study"> | Date | string | null
    person?: XOR<PersonRelationFilter, PersonWhereInput>
  }, "id">

  export type StudyOrderByWithAggregationInput = {
    id?: SortOrder
    level?: SortOrder
    title?: SortOrder
    institute?: SortOrder
    fieldOfStudy?: SortOrder
    startStudyDate?: SortOrder
    personId?: SortOrder
    currentlyStudying?: SortOrderInput | SortOrder
    studySitutation?: SortOrderInput | SortOrder
    cityStudy?: SortOrderInput | SortOrder
    countyStudy?: SortOrderInput | SortOrder
    endStudyDate?: SortOrderInput | SortOrder
    _count?: StudyCountOrderByAggregateInput
    _avg?: StudyAvgOrderByAggregateInput
    _max?: StudyMaxOrderByAggregateInput
    _min?: StudyMinOrderByAggregateInput
    _sum?: StudySumOrderByAggregateInput
  }

  export type StudyScalarWhereWithAggregatesInput = {
    AND?: StudyScalarWhereWithAggregatesInput | StudyScalarWhereWithAggregatesInput[]
    OR?: StudyScalarWhereWithAggregatesInput[]
    NOT?: StudyScalarWhereWithAggregatesInput | StudyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Study"> | number
    level?: StringWithAggregatesFilter<"Study"> | string
    title?: StringWithAggregatesFilter<"Study"> | string
    institute?: StringWithAggregatesFilter<"Study"> | string
    fieldOfStudy?: StringWithAggregatesFilter<"Study"> | string
    startStudyDate?: DateTimeWithAggregatesFilter<"Study"> | Date | string
    personId?: IntWithAggregatesFilter<"Study"> | number
    currentlyStudying?: BoolNullableWithAggregatesFilter<"Study"> | boolean | null
    studySitutation?: StringNullableWithAggregatesFilter<"Study"> | string | null
    cityStudy?: StringNullableWithAggregatesFilter<"Study"> | string | null
    countyStudy?: StringNullableWithAggregatesFilter<"Study"> | string | null
    endStudyDate?: DateTimeNullableWithAggregatesFilter<"Study"> | Date | string | null
  }

  export type WorkExperienceWhereInput = {
    AND?: WorkExperienceWhereInput | WorkExperienceWhereInput[]
    OR?: WorkExperienceWhereInput[]
    NOT?: WorkExperienceWhereInput | WorkExperienceWhereInput[]
    id?: IntFilter<"WorkExperience"> | number
    role?: StringFilter<"WorkExperience"> | string
    company?: StringFilter<"WorkExperience"> | string
    workField?: StringFilter<"WorkExperience"> | string
    positionLevel?: StringNullableFilter<"WorkExperience"> | string | null
    peopleInCharge?: StringNullableFilter<"WorkExperience"> | string | null
    personId?: IntFilter<"WorkExperience"> | number
    currentlyWorking?: BoolNullableFilter<"WorkExperience"> | boolean | null
    endWorkDate?: DateTimeNullableFilter<"WorkExperience"> | Date | string | null
    salary?: StringNullableFilter<"WorkExperience"> | string | null
    skills?: StringNullableListFilter<"WorkExperience">
    startWorkDate?: DateTimeFilter<"WorkExperience"> | Date | string
    task?: StringNullableFilter<"WorkExperience"> | string | null
    person?: XOR<PersonRelationFilter, PersonWhereInput>
  }

  export type WorkExperienceOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    role?: SortOrder
    company?: SortOrder
    workField?: SortOrder
    positionLevel?: SortOrderInput | SortOrder
    peopleInCharge?: SortOrderInput | SortOrder
    personId?: SortOrder
    currentlyWorking?: SortOrderInput | SortOrder
    endWorkDate?: SortOrderInput | SortOrder
    salary?: SortOrderInput | SortOrder
    skills?: SortOrder
    startWorkDate?: SortOrder
    task?: SortOrderInput | SortOrder
    person?: PersonOrderByWithRelationAndSearchRelevanceInput
    _relevance?: WorkExperienceOrderByRelevanceInput
  }

  export type WorkExperienceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: WorkExperienceWhereInput | WorkExperienceWhereInput[]
    OR?: WorkExperienceWhereInput[]
    NOT?: WorkExperienceWhereInput | WorkExperienceWhereInput[]
    role?: StringFilter<"WorkExperience"> | string
    company?: StringFilter<"WorkExperience"> | string
    workField?: StringFilter<"WorkExperience"> | string
    positionLevel?: StringNullableFilter<"WorkExperience"> | string | null
    peopleInCharge?: StringNullableFilter<"WorkExperience"> | string | null
    personId?: IntFilter<"WorkExperience"> | number
    currentlyWorking?: BoolNullableFilter<"WorkExperience"> | boolean | null
    endWorkDate?: DateTimeNullableFilter<"WorkExperience"> | Date | string | null
    salary?: StringNullableFilter<"WorkExperience"> | string | null
    skills?: StringNullableListFilter<"WorkExperience">
    startWorkDate?: DateTimeFilter<"WorkExperience"> | Date | string
    task?: StringNullableFilter<"WorkExperience"> | string | null
    person?: XOR<PersonRelationFilter, PersonWhereInput>
  }, "id">

  export type WorkExperienceOrderByWithAggregationInput = {
    id?: SortOrder
    role?: SortOrder
    company?: SortOrder
    workField?: SortOrder
    positionLevel?: SortOrderInput | SortOrder
    peopleInCharge?: SortOrderInput | SortOrder
    personId?: SortOrder
    currentlyWorking?: SortOrderInput | SortOrder
    endWorkDate?: SortOrderInput | SortOrder
    salary?: SortOrderInput | SortOrder
    skills?: SortOrder
    startWorkDate?: SortOrder
    task?: SortOrderInput | SortOrder
    _count?: WorkExperienceCountOrderByAggregateInput
    _avg?: WorkExperienceAvgOrderByAggregateInput
    _max?: WorkExperienceMaxOrderByAggregateInput
    _min?: WorkExperienceMinOrderByAggregateInput
    _sum?: WorkExperienceSumOrderByAggregateInput
  }

  export type WorkExperienceScalarWhereWithAggregatesInput = {
    AND?: WorkExperienceScalarWhereWithAggregatesInput | WorkExperienceScalarWhereWithAggregatesInput[]
    OR?: WorkExperienceScalarWhereWithAggregatesInput[]
    NOT?: WorkExperienceScalarWhereWithAggregatesInput | WorkExperienceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"WorkExperience"> | number
    role?: StringWithAggregatesFilter<"WorkExperience"> | string
    company?: StringWithAggregatesFilter<"WorkExperience"> | string
    workField?: StringWithAggregatesFilter<"WorkExperience"> | string
    positionLevel?: StringNullableWithAggregatesFilter<"WorkExperience"> | string | null
    peopleInCharge?: StringNullableWithAggregatesFilter<"WorkExperience"> | string | null
    personId?: IntWithAggregatesFilter<"WorkExperience"> | number
    currentlyWorking?: BoolNullableWithAggregatesFilter<"WorkExperience"> | boolean | null
    endWorkDate?: DateTimeNullableWithAggregatesFilter<"WorkExperience"> | Date | string | null
    salary?: StringNullableWithAggregatesFilter<"WorkExperience"> | string | null
    skills?: StringNullableListFilter<"WorkExperience">
    startWorkDate?: DateTimeWithAggregatesFilter<"WorkExperience"> | Date | string
    task?: StringNullableWithAggregatesFilter<"WorkExperience"> | string | null
  }

  export type CompaniesWhereInput = {
    AND?: CompaniesWhereInput | CompaniesWhereInput[]
    OR?: CompaniesWhereInput[]
    NOT?: CompaniesWhereInput | CompaniesWhereInput[]
    id?: IntFilter<"Companies"> | number
    companyName?: StringFilter<"Companies"> | string
    name?: StringFilter<"Companies"> | string
    surname?: StringFilter<"Companies"> | string
    companyEmail?: StringFilter<"Companies"> | string
    companyPhone?: StringFilter<"Companies"> | string
    companyWebsite?: StringNullableFilter<"Companies"> | string | null
    howCanWeHelp?: StringNullableFilter<"Companies"> | string | null
    termsAndConditions?: BoolFilter<"Companies"> | boolean
  }

  export type CompaniesOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    companyName?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    companyEmail?: SortOrder
    companyPhone?: SortOrder
    companyWebsite?: SortOrderInput | SortOrder
    howCanWeHelp?: SortOrderInput | SortOrder
    termsAndConditions?: SortOrder
    _relevance?: CompaniesOrderByRelevanceInput
  }

  export type CompaniesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CompaniesWhereInput | CompaniesWhereInput[]
    OR?: CompaniesWhereInput[]
    NOT?: CompaniesWhereInput | CompaniesWhereInput[]
    companyName?: StringFilter<"Companies"> | string
    name?: StringFilter<"Companies"> | string
    surname?: StringFilter<"Companies"> | string
    companyEmail?: StringFilter<"Companies"> | string
    companyPhone?: StringFilter<"Companies"> | string
    companyWebsite?: StringNullableFilter<"Companies"> | string | null
    howCanWeHelp?: StringNullableFilter<"Companies"> | string | null
    termsAndConditions?: BoolFilter<"Companies"> | boolean
  }, "id">

  export type CompaniesOrderByWithAggregationInput = {
    id?: SortOrder
    companyName?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    companyEmail?: SortOrder
    companyPhone?: SortOrder
    companyWebsite?: SortOrderInput | SortOrder
    howCanWeHelp?: SortOrderInput | SortOrder
    termsAndConditions?: SortOrder
    _count?: CompaniesCountOrderByAggregateInput
    _avg?: CompaniesAvgOrderByAggregateInput
    _max?: CompaniesMaxOrderByAggregateInput
    _min?: CompaniesMinOrderByAggregateInput
    _sum?: CompaniesSumOrderByAggregateInput
  }

  export type CompaniesScalarWhereWithAggregatesInput = {
    AND?: CompaniesScalarWhereWithAggregatesInput | CompaniesScalarWhereWithAggregatesInput[]
    OR?: CompaniesScalarWhereWithAggregatesInput[]
    NOT?: CompaniesScalarWhereWithAggregatesInput | CompaniesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Companies"> | number
    companyName?: StringWithAggregatesFilter<"Companies"> | string
    name?: StringWithAggregatesFilter<"Companies"> | string
    surname?: StringWithAggregatesFilter<"Companies"> | string
    companyEmail?: StringWithAggregatesFilter<"Companies"> | string
    companyPhone?: StringWithAggregatesFilter<"Companies"> | string
    companyWebsite?: StringNullableWithAggregatesFilter<"Companies"> | string | null
    howCanWeHelp?: StringNullableWithAggregatesFilter<"Companies"> | string | null
    termsAndConditions?: BoolWithAggregatesFilter<"Companies"> | boolean
  }

  export type PersonCreateInput = {
    dni: string
    dniNumber: string
    birthday: Date | string
    name: string
    surname: string
    about: string
    address: string
    cp?: string | null
    email: string
    phone: string
    cityPD?: string | null
    countyPD?: string | null
    gender?: string | null
    liveAbroad?: boolean | null
    currentCountry?: string | null
    currentCity?: string | null
    languages?: LanguageCreateNestedManyWithoutPersonInput
    references?: ReferenceCreateNestedManyWithoutPersonInput
    studies?: StudyCreateNestedManyWithoutPersonInput
    workExperiences?: WorkExperienceCreateNestedManyWithoutPersonInput
  }

  export type PersonUncheckedCreateInput = {
    id?: number
    dni: string
    dniNumber: string
    birthday: Date | string
    name: string
    surname: string
    about: string
    address: string
    cp?: string | null
    email: string
    phone: string
    cityPD?: string | null
    countyPD?: string | null
    gender?: string | null
    liveAbroad?: boolean | null
    currentCountry?: string | null
    currentCity?: string | null
    languages?: LanguageUncheckedCreateNestedManyWithoutPersonInput
    references?: ReferenceUncheckedCreateNestedManyWithoutPersonInput
    studies?: StudyUncheckedCreateNestedManyWithoutPersonInput
    workExperiences?: WorkExperienceUncheckedCreateNestedManyWithoutPersonInput
  }

  export type PersonUpdateInput = {
    dni?: StringFieldUpdateOperationsInput | string
    dniNumber?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    cp?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    cityPD?: NullableStringFieldUpdateOperationsInput | string | null
    countyPD?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    liveAbroad?: NullableBoolFieldUpdateOperationsInput | boolean | null
    currentCountry?: NullableStringFieldUpdateOperationsInput | string | null
    currentCity?: NullableStringFieldUpdateOperationsInput | string | null
    languages?: LanguageUpdateManyWithoutPersonNestedInput
    references?: ReferenceUpdateManyWithoutPersonNestedInput
    studies?: StudyUpdateManyWithoutPersonNestedInput
    workExperiences?: WorkExperienceUpdateManyWithoutPersonNestedInput
  }

  export type PersonUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    dni?: StringFieldUpdateOperationsInput | string
    dniNumber?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    cp?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    cityPD?: NullableStringFieldUpdateOperationsInput | string | null
    countyPD?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    liveAbroad?: NullableBoolFieldUpdateOperationsInput | boolean | null
    currentCountry?: NullableStringFieldUpdateOperationsInput | string | null
    currentCity?: NullableStringFieldUpdateOperationsInput | string | null
    languages?: LanguageUncheckedUpdateManyWithoutPersonNestedInput
    references?: ReferenceUncheckedUpdateManyWithoutPersonNestedInput
    studies?: StudyUncheckedUpdateManyWithoutPersonNestedInput
    workExperiences?: WorkExperienceUncheckedUpdateManyWithoutPersonNestedInput
  }

  export type PersonCreateManyInput = {
    id?: number
    dni: string
    dniNumber: string
    birthday: Date | string
    name: string
    surname: string
    about: string
    address: string
    cp?: string | null
    email: string
    phone: string
    cityPD?: string | null
    countyPD?: string | null
    gender?: string | null
    liveAbroad?: boolean | null
    currentCountry?: string | null
    currentCity?: string | null
  }

  export type PersonUpdateManyMutationInput = {
    dni?: StringFieldUpdateOperationsInput | string
    dniNumber?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    cp?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    cityPD?: NullableStringFieldUpdateOperationsInput | string | null
    countyPD?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    liveAbroad?: NullableBoolFieldUpdateOperationsInput | boolean | null
    currentCountry?: NullableStringFieldUpdateOperationsInput | string | null
    currentCity?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PersonUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    dni?: StringFieldUpdateOperationsInput | string
    dniNumber?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    cp?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    cityPD?: NullableStringFieldUpdateOperationsInput | string | null
    countyPD?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    liveAbroad?: NullableBoolFieldUpdateOperationsInput | boolean | null
    currentCountry?: NullableStringFieldUpdateOperationsInput | string | null
    currentCity?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LanguageCreateInput = {
    languageName: string
    spokenLevel: number
    readLevel: number
    writtenLevel: number
    person: PersonCreateNestedOneWithoutLanguagesInput
  }

  export type LanguageUncheckedCreateInput = {
    id?: number
    languageName: string
    spokenLevel: number
    readLevel: number
    writtenLevel: number
    personId: number
  }

  export type LanguageUpdateInput = {
    languageName?: StringFieldUpdateOperationsInput | string
    spokenLevel?: IntFieldUpdateOperationsInput | number
    readLevel?: IntFieldUpdateOperationsInput | number
    writtenLevel?: IntFieldUpdateOperationsInput | number
    person?: PersonUpdateOneRequiredWithoutLanguagesNestedInput
  }

  export type LanguageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    languageName?: StringFieldUpdateOperationsInput | string
    spokenLevel?: IntFieldUpdateOperationsInput | number
    readLevel?: IntFieldUpdateOperationsInput | number
    writtenLevel?: IntFieldUpdateOperationsInput | number
    personId?: IntFieldUpdateOperationsInput | number
  }

  export type LanguageCreateManyInput = {
    id?: number
    languageName: string
    spokenLevel: number
    readLevel: number
    writtenLevel: number
    personId: number
  }

  export type LanguageUpdateManyMutationInput = {
    languageName?: StringFieldUpdateOperationsInput | string
    spokenLevel?: IntFieldUpdateOperationsInput | number
    readLevel?: IntFieldUpdateOperationsInput | number
    writtenLevel?: IntFieldUpdateOperationsInput | number
  }

  export type LanguageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    languageName?: StringFieldUpdateOperationsInput | string
    spokenLevel?: IntFieldUpdateOperationsInput | number
    readLevel?: IntFieldUpdateOperationsInput | number
    writtenLevel?: IntFieldUpdateOperationsInput | number
    personId?: IntFieldUpdateOperationsInput | number
  }

  export type ReferenceCreateInput = {
    referenceName: string
    referenceSurname: string
    referencePhone: string
    referenceCompany?: string | null
    referenceRole?: string | null
    referenceType: string
    person: PersonCreateNestedOneWithoutReferencesInput
  }

  export type ReferenceUncheckedCreateInput = {
    id?: number
    referenceName: string
    referenceSurname: string
    referencePhone: string
    referenceCompany?: string | null
    personId: number
    referenceRole?: string | null
    referenceType: string
  }

  export type ReferenceUpdateInput = {
    referenceName?: StringFieldUpdateOperationsInput | string
    referenceSurname?: StringFieldUpdateOperationsInput | string
    referencePhone?: StringFieldUpdateOperationsInput | string
    referenceCompany?: NullableStringFieldUpdateOperationsInput | string | null
    referenceRole?: NullableStringFieldUpdateOperationsInput | string | null
    referenceType?: StringFieldUpdateOperationsInput | string
    person?: PersonUpdateOneRequiredWithoutReferencesNestedInput
  }

  export type ReferenceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    referenceName?: StringFieldUpdateOperationsInput | string
    referenceSurname?: StringFieldUpdateOperationsInput | string
    referencePhone?: StringFieldUpdateOperationsInput | string
    referenceCompany?: NullableStringFieldUpdateOperationsInput | string | null
    personId?: IntFieldUpdateOperationsInput | number
    referenceRole?: NullableStringFieldUpdateOperationsInput | string | null
    referenceType?: StringFieldUpdateOperationsInput | string
  }

  export type ReferenceCreateManyInput = {
    id?: number
    referenceName: string
    referenceSurname: string
    referencePhone: string
    referenceCompany?: string | null
    personId: number
    referenceRole?: string | null
    referenceType: string
  }

  export type ReferenceUpdateManyMutationInput = {
    referenceName?: StringFieldUpdateOperationsInput | string
    referenceSurname?: StringFieldUpdateOperationsInput | string
    referencePhone?: StringFieldUpdateOperationsInput | string
    referenceCompany?: NullableStringFieldUpdateOperationsInput | string | null
    referenceRole?: NullableStringFieldUpdateOperationsInput | string | null
    referenceType?: StringFieldUpdateOperationsInput | string
  }

  export type ReferenceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    referenceName?: StringFieldUpdateOperationsInput | string
    referenceSurname?: StringFieldUpdateOperationsInput | string
    referencePhone?: StringFieldUpdateOperationsInput | string
    referenceCompany?: NullableStringFieldUpdateOperationsInput | string | null
    personId?: IntFieldUpdateOperationsInput | number
    referenceRole?: NullableStringFieldUpdateOperationsInput | string | null
    referenceType?: StringFieldUpdateOperationsInput | string
  }

  export type StudyCreateInput = {
    level: string
    title: string
    institute: string
    fieldOfStudy: string
    startStudyDate: Date | string
    currentlyStudying?: boolean | null
    studySitutation?: string | null
    cityStudy?: string | null
    countyStudy?: string | null
    endStudyDate?: Date | string | null
    person: PersonCreateNestedOneWithoutStudiesInput
  }

  export type StudyUncheckedCreateInput = {
    id?: number
    level: string
    title: string
    institute: string
    fieldOfStudy: string
    startStudyDate: Date | string
    personId: number
    currentlyStudying?: boolean | null
    studySitutation?: string | null
    cityStudy?: string | null
    countyStudy?: string | null
    endStudyDate?: Date | string | null
  }

  export type StudyUpdateInput = {
    level?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    institute?: StringFieldUpdateOperationsInput | string
    fieldOfStudy?: StringFieldUpdateOperationsInput | string
    startStudyDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currentlyStudying?: NullableBoolFieldUpdateOperationsInput | boolean | null
    studySitutation?: NullableStringFieldUpdateOperationsInput | string | null
    cityStudy?: NullableStringFieldUpdateOperationsInput | string | null
    countyStudy?: NullableStringFieldUpdateOperationsInput | string | null
    endStudyDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    person?: PersonUpdateOneRequiredWithoutStudiesNestedInput
  }

  export type StudyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    level?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    institute?: StringFieldUpdateOperationsInput | string
    fieldOfStudy?: StringFieldUpdateOperationsInput | string
    startStudyDate?: DateTimeFieldUpdateOperationsInput | Date | string
    personId?: IntFieldUpdateOperationsInput | number
    currentlyStudying?: NullableBoolFieldUpdateOperationsInput | boolean | null
    studySitutation?: NullableStringFieldUpdateOperationsInput | string | null
    cityStudy?: NullableStringFieldUpdateOperationsInput | string | null
    countyStudy?: NullableStringFieldUpdateOperationsInput | string | null
    endStudyDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StudyCreateManyInput = {
    id?: number
    level: string
    title: string
    institute: string
    fieldOfStudy: string
    startStudyDate: Date | string
    personId: number
    currentlyStudying?: boolean | null
    studySitutation?: string | null
    cityStudy?: string | null
    countyStudy?: string | null
    endStudyDate?: Date | string | null
  }

  export type StudyUpdateManyMutationInput = {
    level?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    institute?: StringFieldUpdateOperationsInput | string
    fieldOfStudy?: StringFieldUpdateOperationsInput | string
    startStudyDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currentlyStudying?: NullableBoolFieldUpdateOperationsInput | boolean | null
    studySitutation?: NullableStringFieldUpdateOperationsInput | string | null
    cityStudy?: NullableStringFieldUpdateOperationsInput | string | null
    countyStudy?: NullableStringFieldUpdateOperationsInput | string | null
    endStudyDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StudyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    level?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    institute?: StringFieldUpdateOperationsInput | string
    fieldOfStudy?: StringFieldUpdateOperationsInput | string
    startStudyDate?: DateTimeFieldUpdateOperationsInput | Date | string
    personId?: IntFieldUpdateOperationsInput | number
    currentlyStudying?: NullableBoolFieldUpdateOperationsInput | boolean | null
    studySitutation?: NullableStringFieldUpdateOperationsInput | string | null
    cityStudy?: NullableStringFieldUpdateOperationsInput | string | null
    countyStudy?: NullableStringFieldUpdateOperationsInput | string | null
    endStudyDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type WorkExperienceCreateInput = {
    role: string
    company: string
    workField: string
    positionLevel?: string | null
    peopleInCharge?: string | null
    currentlyWorking?: boolean | null
    endWorkDate?: Date | string | null
    salary?: string | null
    skills?: WorkExperienceCreateskillsInput | string[]
    startWorkDate: Date | string
    task?: string | null
    person: PersonCreateNestedOneWithoutWorkExperiencesInput
  }

  export type WorkExperienceUncheckedCreateInput = {
    id?: number
    role: string
    company: string
    workField: string
    positionLevel?: string | null
    peopleInCharge?: string | null
    personId: number
    currentlyWorking?: boolean | null
    endWorkDate?: Date | string | null
    salary?: string | null
    skills?: WorkExperienceCreateskillsInput | string[]
    startWorkDate: Date | string
    task?: string | null
  }

  export type WorkExperienceUpdateInput = {
    role?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    workField?: StringFieldUpdateOperationsInput | string
    positionLevel?: NullableStringFieldUpdateOperationsInput | string | null
    peopleInCharge?: NullableStringFieldUpdateOperationsInput | string | null
    currentlyWorking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    endWorkDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableStringFieldUpdateOperationsInput | string | null
    skills?: WorkExperienceUpdateskillsInput | string[]
    startWorkDate?: DateTimeFieldUpdateOperationsInput | Date | string
    task?: NullableStringFieldUpdateOperationsInput | string | null
    person?: PersonUpdateOneRequiredWithoutWorkExperiencesNestedInput
  }

  export type WorkExperienceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    workField?: StringFieldUpdateOperationsInput | string
    positionLevel?: NullableStringFieldUpdateOperationsInput | string | null
    peopleInCharge?: NullableStringFieldUpdateOperationsInput | string | null
    personId?: IntFieldUpdateOperationsInput | number
    currentlyWorking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    endWorkDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableStringFieldUpdateOperationsInput | string | null
    skills?: WorkExperienceUpdateskillsInput | string[]
    startWorkDate?: DateTimeFieldUpdateOperationsInput | Date | string
    task?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WorkExperienceCreateManyInput = {
    id?: number
    role: string
    company: string
    workField: string
    positionLevel?: string | null
    peopleInCharge?: string | null
    personId: number
    currentlyWorking?: boolean | null
    endWorkDate?: Date | string | null
    salary?: string | null
    skills?: WorkExperienceCreateskillsInput | string[]
    startWorkDate: Date | string
    task?: string | null
  }

  export type WorkExperienceUpdateManyMutationInput = {
    role?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    workField?: StringFieldUpdateOperationsInput | string
    positionLevel?: NullableStringFieldUpdateOperationsInput | string | null
    peopleInCharge?: NullableStringFieldUpdateOperationsInput | string | null
    currentlyWorking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    endWorkDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableStringFieldUpdateOperationsInput | string | null
    skills?: WorkExperienceUpdateskillsInput | string[]
    startWorkDate?: DateTimeFieldUpdateOperationsInput | Date | string
    task?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WorkExperienceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    workField?: StringFieldUpdateOperationsInput | string
    positionLevel?: NullableStringFieldUpdateOperationsInput | string | null
    peopleInCharge?: NullableStringFieldUpdateOperationsInput | string | null
    personId?: IntFieldUpdateOperationsInput | number
    currentlyWorking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    endWorkDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableStringFieldUpdateOperationsInput | string | null
    skills?: WorkExperienceUpdateskillsInput | string[]
    startWorkDate?: DateTimeFieldUpdateOperationsInput | Date | string
    task?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CompaniesCreateInput = {
    companyName: string
    name: string
    surname: string
    companyEmail: string
    companyPhone: string
    companyWebsite?: string | null
    howCanWeHelp?: string | null
    termsAndConditions: boolean
  }

  export type CompaniesUncheckedCreateInput = {
    id?: number
    companyName: string
    name: string
    surname: string
    companyEmail: string
    companyPhone: string
    companyWebsite?: string | null
    howCanWeHelp?: string | null
    termsAndConditions: boolean
  }

  export type CompaniesUpdateInput = {
    companyName?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    companyEmail?: StringFieldUpdateOperationsInput | string
    companyPhone?: StringFieldUpdateOperationsInput | string
    companyWebsite?: NullableStringFieldUpdateOperationsInput | string | null
    howCanWeHelp?: NullableStringFieldUpdateOperationsInput | string | null
    termsAndConditions?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CompaniesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyName?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    companyEmail?: StringFieldUpdateOperationsInput | string
    companyPhone?: StringFieldUpdateOperationsInput | string
    companyWebsite?: NullableStringFieldUpdateOperationsInput | string | null
    howCanWeHelp?: NullableStringFieldUpdateOperationsInput | string | null
    termsAndConditions?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CompaniesCreateManyInput = {
    id?: number
    companyName: string
    name: string
    surname: string
    companyEmail: string
    companyPhone: string
    companyWebsite?: string | null
    howCanWeHelp?: string | null
    termsAndConditions: boolean
  }

  export type CompaniesUpdateManyMutationInput = {
    companyName?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    companyEmail?: StringFieldUpdateOperationsInput | string
    companyPhone?: StringFieldUpdateOperationsInput | string
    companyWebsite?: NullableStringFieldUpdateOperationsInput | string | null
    howCanWeHelp?: NullableStringFieldUpdateOperationsInput | string | null
    termsAndConditions?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CompaniesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyName?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    companyEmail?: StringFieldUpdateOperationsInput | string
    companyPhone?: StringFieldUpdateOperationsInput | string
    companyWebsite?: NullableStringFieldUpdateOperationsInput | string | null
    howCanWeHelp?: NullableStringFieldUpdateOperationsInput | string | null
    termsAndConditions?: BoolFieldUpdateOperationsInput | boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type LanguageListRelationFilter = {
    every?: LanguageWhereInput
    some?: LanguageWhereInput
    none?: LanguageWhereInput
  }

  export type ReferenceListRelationFilter = {
    every?: ReferenceWhereInput
    some?: ReferenceWhereInput
    none?: ReferenceWhereInput
  }

  export type StudyListRelationFilter = {
    every?: StudyWhereInput
    some?: StudyWhereInput
    none?: StudyWhereInput
  }

  export type WorkExperienceListRelationFilter = {
    every?: WorkExperienceWhereInput
    some?: WorkExperienceWhereInput
    none?: WorkExperienceWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type LanguageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReferenceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkExperienceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PersonOrderByRelevanceInput = {
    fields: PersonOrderByRelevanceFieldEnum | PersonOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PersonCountOrderByAggregateInput = {
    id?: SortOrder
    dni?: SortOrder
    dniNumber?: SortOrder
    birthday?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    about?: SortOrder
    address?: SortOrder
    cp?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    cityPD?: SortOrder
    countyPD?: SortOrder
    gender?: SortOrder
    liveAbroad?: SortOrder
    currentCountry?: SortOrder
    currentCity?: SortOrder
  }

  export type PersonAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PersonMaxOrderByAggregateInput = {
    id?: SortOrder
    dni?: SortOrder
    dniNumber?: SortOrder
    birthday?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    about?: SortOrder
    address?: SortOrder
    cp?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    cityPD?: SortOrder
    countyPD?: SortOrder
    gender?: SortOrder
    liveAbroad?: SortOrder
    currentCountry?: SortOrder
    currentCity?: SortOrder
  }

  export type PersonMinOrderByAggregateInput = {
    id?: SortOrder
    dni?: SortOrder
    dniNumber?: SortOrder
    birthday?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    about?: SortOrder
    address?: SortOrder
    cp?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    cityPD?: SortOrder
    countyPD?: SortOrder
    gender?: SortOrder
    liveAbroad?: SortOrder
    currentCountry?: SortOrder
    currentCity?: SortOrder
  }

  export type PersonSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type PersonRelationFilter = {
    is?: PersonWhereInput
    isNot?: PersonWhereInput
  }

  export type LanguageOrderByRelevanceInput = {
    fields: LanguageOrderByRelevanceFieldEnum | LanguageOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type LanguageCountOrderByAggregateInput = {
    id?: SortOrder
    languageName?: SortOrder
    spokenLevel?: SortOrder
    readLevel?: SortOrder
    writtenLevel?: SortOrder
    personId?: SortOrder
  }

  export type LanguageAvgOrderByAggregateInput = {
    id?: SortOrder
    spokenLevel?: SortOrder
    readLevel?: SortOrder
    writtenLevel?: SortOrder
    personId?: SortOrder
  }

  export type LanguageMaxOrderByAggregateInput = {
    id?: SortOrder
    languageName?: SortOrder
    spokenLevel?: SortOrder
    readLevel?: SortOrder
    writtenLevel?: SortOrder
    personId?: SortOrder
  }

  export type LanguageMinOrderByAggregateInput = {
    id?: SortOrder
    languageName?: SortOrder
    spokenLevel?: SortOrder
    readLevel?: SortOrder
    writtenLevel?: SortOrder
    personId?: SortOrder
  }

  export type LanguageSumOrderByAggregateInput = {
    id?: SortOrder
    spokenLevel?: SortOrder
    readLevel?: SortOrder
    writtenLevel?: SortOrder
    personId?: SortOrder
  }

  export type ReferenceOrderByRelevanceInput = {
    fields: ReferenceOrderByRelevanceFieldEnum | ReferenceOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ReferenceCountOrderByAggregateInput = {
    id?: SortOrder
    referenceName?: SortOrder
    referenceSurname?: SortOrder
    referencePhone?: SortOrder
    referenceCompany?: SortOrder
    personId?: SortOrder
    referenceRole?: SortOrder
    referenceType?: SortOrder
  }

  export type ReferenceAvgOrderByAggregateInput = {
    id?: SortOrder
    personId?: SortOrder
  }

  export type ReferenceMaxOrderByAggregateInput = {
    id?: SortOrder
    referenceName?: SortOrder
    referenceSurname?: SortOrder
    referencePhone?: SortOrder
    referenceCompany?: SortOrder
    personId?: SortOrder
    referenceRole?: SortOrder
    referenceType?: SortOrder
  }

  export type ReferenceMinOrderByAggregateInput = {
    id?: SortOrder
    referenceName?: SortOrder
    referenceSurname?: SortOrder
    referencePhone?: SortOrder
    referenceCompany?: SortOrder
    personId?: SortOrder
    referenceRole?: SortOrder
    referenceType?: SortOrder
  }

  export type ReferenceSumOrderByAggregateInput = {
    id?: SortOrder
    personId?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type StudyOrderByRelevanceInput = {
    fields: StudyOrderByRelevanceFieldEnum | StudyOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type StudyCountOrderByAggregateInput = {
    id?: SortOrder
    level?: SortOrder
    title?: SortOrder
    institute?: SortOrder
    fieldOfStudy?: SortOrder
    startStudyDate?: SortOrder
    personId?: SortOrder
    currentlyStudying?: SortOrder
    studySitutation?: SortOrder
    cityStudy?: SortOrder
    countyStudy?: SortOrder
    endStudyDate?: SortOrder
  }

  export type StudyAvgOrderByAggregateInput = {
    id?: SortOrder
    personId?: SortOrder
  }

  export type StudyMaxOrderByAggregateInput = {
    id?: SortOrder
    level?: SortOrder
    title?: SortOrder
    institute?: SortOrder
    fieldOfStudy?: SortOrder
    startStudyDate?: SortOrder
    personId?: SortOrder
    currentlyStudying?: SortOrder
    studySitutation?: SortOrder
    cityStudy?: SortOrder
    countyStudy?: SortOrder
    endStudyDate?: SortOrder
  }

  export type StudyMinOrderByAggregateInput = {
    id?: SortOrder
    level?: SortOrder
    title?: SortOrder
    institute?: SortOrder
    fieldOfStudy?: SortOrder
    startStudyDate?: SortOrder
    personId?: SortOrder
    currentlyStudying?: SortOrder
    studySitutation?: SortOrder
    cityStudy?: SortOrder
    countyStudy?: SortOrder
    endStudyDate?: SortOrder
  }

  export type StudySumOrderByAggregateInput = {
    id?: SortOrder
    personId?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type WorkExperienceOrderByRelevanceInput = {
    fields: WorkExperienceOrderByRelevanceFieldEnum | WorkExperienceOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type WorkExperienceCountOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    company?: SortOrder
    workField?: SortOrder
    positionLevel?: SortOrder
    peopleInCharge?: SortOrder
    personId?: SortOrder
    currentlyWorking?: SortOrder
    endWorkDate?: SortOrder
    salary?: SortOrder
    skills?: SortOrder
    startWorkDate?: SortOrder
    task?: SortOrder
  }

  export type WorkExperienceAvgOrderByAggregateInput = {
    id?: SortOrder
    personId?: SortOrder
  }

  export type WorkExperienceMaxOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    company?: SortOrder
    workField?: SortOrder
    positionLevel?: SortOrder
    peopleInCharge?: SortOrder
    personId?: SortOrder
    currentlyWorking?: SortOrder
    endWorkDate?: SortOrder
    salary?: SortOrder
    startWorkDate?: SortOrder
    task?: SortOrder
  }

  export type WorkExperienceMinOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    company?: SortOrder
    workField?: SortOrder
    positionLevel?: SortOrder
    peopleInCharge?: SortOrder
    personId?: SortOrder
    currentlyWorking?: SortOrder
    endWorkDate?: SortOrder
    salary?: SortOrder
    startWorkDate?: SortOrder
    task?: SortOrder
  }

  export type WorkExperienceSumOrderByAggregateInput = {
    id?: SortOrder
    personId?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type CompaniesOrderByRelevanceInput = {
    fields: CompaniesOrderByRelevanceFieldEnum | CompaniesOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CompaniesCountOrderByAggregateInput = {
    id?: SortOrder
    companyName?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    companyEmail?: SortOrder
    companyPhone?: SortOrder
    companyWebsite?: SortOrder
    howCanWeHelp?: SortOrder
    termsAndConditions?: SortOrder
  }

  export type CompaniesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CompaniesMaxOrderByAggregateInput = {
    id?: SortOrder
    companyName?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    companyEmail?: SortOrder
    companyPhone?: SortOrder
    companyWebsite?: SortOrder
    howCanWeHelp?: SortOrder
    termsAndConditions?: SortOrder
  }

  export type CompaniesMinOrderByAggregateInput = {
    id?: SortOrder
    companyName?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    companyEmail?: SortOrder
    companyPhone?: SortOrder
    companyWebsite?: SortOrder
    howCanWeHelp?: SortOrder
    termsAndConditions?: SortOrder
  }

  export type CompaniesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type LanguageCreateNestedManyWithoutPersonInput = {
    create?: XOR<LanguageCreateWithoutPersonInput, LanguageUncheckedCreateWithoutPersonInput> | LanguageCreateWithoutPersonInput[] | LanguageUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: LanguageCreateOrConnectWithoutPersonInput | LanguageCreateOrConnectWithoutPersonInput[]
    createMany?: LanguageCreateManyPersonInputEnvelope
    connect?: LanguageWhereUniqueInput | LanguageWhereUniqueInput[]
  }

  export type ReferenceCreateNestedManyWithoutPersonInput = {
    create?: XOR<ReferenceCreateWithoutPersonInput, ReferenceUncheckedCreateWithoutPersonInput> | ReferenceCreateWithoutPersonInput[] | ReferenceUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: ReferenceCreateOrConnectWithoutPersonInput | ReferenceCreateOrConnectWithoutPersonInput[]
    createMany?: ReferenceCreateManyPersonInputEnvelope
    connect?: ReferenceWhereUniqueInput | ReferenceWhereUniqueInput[]
  }

  export type StudyCreateNestedManyWithoutPersonInput = {
    create?: XOR<StudyCreateWithoutPersonInput, StudyUncheckedCreateWithoutPersonInput> | StudyCreateWithoutPersonInput[] | StudyUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: StudyCreateOrConnectWithoutPersonInput | StudyCreateOrConnectWithoutPersonInput[]
    createMany?: StudyCreateManyPersonInputEnvelope
    connect?: StudyWhereUniqueInput | StudyWhereUniqueInput[]
  }

  export type WorkExperienceCreateNestedManyWithoutPersonInput = {
    create?: XOR<WorkExperienceCreateWithoutPersonInput, WorkExperienceUncheckedCreateWithoutPersonInput> | WorkExperienceCreateWithoutPersonInput[] | WorkExperienceUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: WorkExperienceCreateOrConnectWithoutPersonInput | WorkExperienceCreateOrConnectWithoutPersonInput[]
    createMany?: WorkExperienceCreateManyPersonInputEnvelope
    connect?: WorkExperienceWhereUniqueInput | WorkExperienceWhereUniqueInput[]
  }

  export type LanguageUncheckedCreateNestedManyWithoutPersonInput = {
    create?: XOR<LanguageCreateWithoutPersonInput, LanguageUncheckedCreateWithoutPersonInput> | LanguageCreateWithoutPersonInput[] | LanguageUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: LanguageCreateOrConnectWithoutPersonInput | LanguageCreateOrConnectWithoutPersonInput[]
    createMany?: LanguageCreateManyPersonInputEnvelope
    connect?: LanguageWhereUniqueInput | LanguageWhereUniqueInput[]
  }

  export type ReferenceUncheckedCreateNestedManyWithoutPersonInput = {
    create?: XOR<ReferenceCreateWithoutPersonInput, ReferenceUncheckedCreateWithoutPersonInput> | ReferenceCreateWithoutPersonInput[] | ReferenceUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: ReferenceCreateOrConnectWithoutPersonInput | ReferenceCreateOrConnectWithoutPersonInput[]
    createMany?: ReferenceCreateManyPersonInputEnvelope
    connect?: ReferenceWhereUniqueInput | ReferenceWhereUniqueInput[]
  }

  export type StudyUncheckedCreateNestedManyWithoutPersonInput = {
    create?: XOR<StudyCreateWithoutPersonInput, StudyUncheckedCreateWithoutPersonInput> | StudyCreateWithoutPersonInput[] | StudyUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: StudyCreateOrConnectWithoutPersonInput | StudyCreateOrConnectWithoutPersonInput[]
    createMany?: StudyCreateManyPersonInputEnvelope
    connect?: StudyWhereUniqueInput | StudyWhereUniqueInput[]
  }

  export type WorkExperienceUncheckedCreateNestedManyWithoutPersonInput = {
    create?: XOR<WorkExperienceCreateWithoutPersonInput, WorkExperienceUncheckedCreateWithoutPersonInput> | WorkExperienceCreateWithoutPersonInput[] | WorkExperienceUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: WorkExperienceCreateOrConnectWithoutPersonInput | WorkExperienceCreateOrConnectWithoutPersonInput[]
    createMany?: WorkExperienceCreateManyPersonInputEnvelope
    connect?: WorkExperienceWhereUniqueInput | WorkExperienceWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type LanguageUpdateManyWithoutPersonNestedInput = {
    create?: XOR<LanguageCreateWithoutPersonInput, LanguageUncheckedCreateWithoutPersonInput> | LanguageCreateWithoutPersonInput[] | LanguageUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: LanguageCreateOrConnectWithoutPersonInput | LanguageCreateOrConnectWithoutPersonInput[]
    upsert?: LanguageUpsertWithWhereUniqueWithoutPersonInput | LanguageUpsertWithWhereUniqueWithoutPersonInput[]
    createMany?: LanguageCreateManyPersonInputEnvelope
    set?: LanguageWhereUniqueInput | LanguageWhereUniqueInput[]
    disconnect?: LanguageWhereUniqueInput | LanguageWhereUniqueInput[]
    delete?: LanguageWhereUniqueInput | LanguageWhereUniqueInput[]
    connect?: LanguageWhereUniqueInput | LanguageWhereUniqueInput[]
    update?: LanguageUpdateWithWhereUniqueWithoutPersonInput | LanguageUpdateWithWhereUniqueWithoutPersonInput[]
    updateMany?: LanguageUpdateManyWithWhereWithoutPersonInput | LanguageUpdateManyWithWhereWithoutPersonInput[]
    deleteMany?: LanguageScalarWhereInput | LanguageScalarWhereInput[]
  }

  export type ReferenceUpdateManyWithoutPersonNestedInput = {
    create?: XOR<ReferenceCreateWithoutPersonInput, ReferenceUncheckedCreateWithoutPersonInput> | ReferenceCreateWithoutPersonInput[] | ReferenceUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: ReferenceCreateOrConnectWithoutPersonInput | ReferenceCreateOrConnectWithoutPersonInput[]
    upsert?: ReferenceUpsertWithWhereUniqueWithoutPersonInput | ReferenceUpsertWithWhereUniqueWithoutPersonInput[]
    createMany?: ReferenceCreateManyPersonInputEnvelope
    set?: ReferenceWhereUniqueInput | ReferenceWhereUniqueInput[]
    disconnect?: ReferenceWhereUniqueInput | ReferenceWhereUniqueInput[]
    delete?: ReferenceWhereUniqueInput | ReferenceWhereUniqueInput[]
    connect?: ReferenceWhereUniqueInput | ReferenceWhereUniqueInput[]
    update?: ReferenceUpdateWithWhereUniqueWithoutPersonInput | ReferenceUpdateWithWhereUniqueWithoutPersonInput[]
    updateMany?: ReferenceUpdateManyWithWhereWithoutPersonInput | ReferenceUpdateManyWithWhereWithoutPersonInput[]
    deleteMany?: ReferenceScalarWhereInput | ReferenceScalarWhereInput[]
  }

  export type StudyUpdateManyWithoutPersonNestedInput = {
    create?: XOR<StudyCreateWithoutPersonInput, StudyUncheckedCreateWithoutPersonInput> | StudyCreateWithoutPersonInput[] | StudyUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: StudyCreateOrConnectWithoutPersonInput | StudyCreateOrConnectWithoutPersonInput[]
    upsert?: StudyUpsertWithWhereUniqueWithoutPersonInput | StudyUpsertWithWhereUniqueWithoutPersonInput[]
    createMany?: StudyCreateManyPersonInputEnvelope
    set?: StudyWhereUniqueInput | StudyWhereUniqueInput[]
    disconnect?: StudyWhereUniqueInput | StudyWhereUniqueInput[]
    delete?: StudyWhereUniqueInput | StudyWhereUniqueInput[]
    connect?: StudyWhereUniqueInput | StudyWhereUniqueInput[]
    update?: StudyUpdateWithWhereUniqueWithoutPersonInput | StudyUpdateWithWhereUniqueWithoutPersonInput[]
    updateMany?: StudyUpdateManyWithWhereWithoutPersonInput | StudyUpdateManyWithWhereWithoutPersonInput[]
    deleteMany?: StudyScalarWhereInput | StudyScalarWhereInput[]
  }

  export type WorkExperienceUpdateManyWithoutPersonNestedInput = {
    create?: XOR<WorkExperienceCreateWithoutPersonInput, WorkExperienceUncheckedCreateWithoutPersonInput> | WorkExperienceCreateWithoutPersonInput[] | WorkExperienceUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: WorkExperienceCreateOrConnectWithoutPersonInput | WorkExperienceCreateOrConnectWithoutPersonInput[]
    upsert?: WorkExperienceUpsertWithWhereUniqueWithoutPersonInput | WorkExperienceUpsertWithWhereUniqueWithoutPersonInput[]
    createMany?: WorkExperienceCreateManyPersonInputEnvelope
    set?: WorkExperienceWhereUniqueInput | WorkExperienceWhereUniqueInput[]
    disconnect?: WorkExperienceWhereUniqueInput | WorkExperienceWhereUniqueInput[]
    delete?: WorkExperienceWhereUniqueInput | WorkExperienceWhereUniqueInput[]
    connect?: WorkExperienceWhereUniqueInput | WorkExperienceWhereUniqueInput[]
    update?: WorkExperienceUpdateWithWhereUniqueWithoutPersonInput | WorkExperienceUpdateWithWhereUniqueWithoutPersonInput[]
    updateMany?: WorkExperienceUpdateManyWithWhereWithoutPersonInput | WorkExperienceUpdateManyWithWhereWithoutPersonInput[]
    deleteMany?: WorkExperienceScalarWhereInput | WorkExperienceScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type LanguageUncheckedUpdateManyWithoutPersonNestedInput = {
    create?: XOR<LanguageCreateWithoutPersonInput, LanguageUncheckedCreateWithoutPersonInput> | LanguageCreateWithoutPersonInput[] | LanguageUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: LanguageCreateOrConnectWithoutPersonInput | LanguageCreateOrConnectWithoutPersonInput[]
    upsert?: LanguageUpsertWithWhereUniqueWithoutPersonInput | LanguageUpsertWithWhereUniqueWithoutPersonInput[]
    createMany?: LanguageCreateManyPersonInputEnvelope
    set?: LanguageWhereUniqueInput | LanguageWhereUniqueInput[]
    disconnect?: LanguageWhereUniqueInput | LanguageWhereUniqueInput[]
    delete?: LanguageWhereUniqueInput | LanguageWhereUniqueInput[]
    connect?: LanguageWhereUniqueInput | LanguageWhereUniqueInput[]
    update?: LanguageUpdateWithWhereUniqueWithoutPersonInput | LanguageUpdateWithWhereUniqueWithoutPersonInput[]
    updateMany?: LanguageUpdateManyWithWhereWithoutPersonInput | LanguageUpdateManyWithWhereWithoutPersonInput[]
    deleteMany?: LanguageScalarWhereInput | LanguageScalarWhereInput[]
  }

  export type ReferenceUncheckedUpdateManyWithoutPersonNestedInput = {
    create?: XOR<ReferenceCreateWithoutPersonInput, ReferenceUncheckedCreateWithoutPersonInput> | ReferenceCreateWithoutPersonInput[] | ReferenceUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: ReferenceCreateOrConnectWithoutPersonInput | ReferenceCreateOrConnectWithoutPersonInput[]
    upsert?: ReferenceUpsertWithWhereUniqueWithoutPersonInput | ReferenceUpsertWithWhereUniqueWithoutPersonInput[]
    createMany?: ReferenceCreateManyPersonInputEnvelope
    set?: ReferenceWhereUniqueInput | ReferenceWhereUniqueInput[]
    disconnect?: ReferenceWhereUniqueInput | ReferenceWhereUniqueInput[]
    delete?: ReferenceWhereUniqueInput | ReferenceWhereUniqueInput[]
    connect?: ReferenceWhereUniqueInput | ReferenceWhereUniqueInput[]
    update?: ReferenceUpdateWithWhereUniqueWithoutPersonInput | ReferenceUpdateWithWhereUniqueWithoutPersonInput[]
    updateMany?: ReferenceUpdateManyWithWhereWithoutPersonInput | ReferenceUpdateManyWithWhereWithoutPersonInput[]
    deleteMany?: ReferenceScalarWhereInput | ReferenceScalarWhereInput[]
  }

  export type StudyUncheckedUpdateManyWithoutPersonNestedInput = {
    create?: XOR<StudyCreateWithoutPersonInput, StudyUncheckedCreateWithoutPersonInput> | StudyCreateWithoutPersonInput[] | StudyUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: StudyCreateOrConnectWithoutPersonInput | StudyCreateOrConnectWithoutPersonInput[]
    upsert?: StudyUpsertWithWhereUniqueWithoutPersonInput | StudyUpsertWithWhereUniqueWithoutPersonInput[]
    createMany?: StudyCreateManyPersonInputEnvelope
    set?: StudyWhereUniqueInput | StudyWhereUniqueInput[]
    disconnect?: StudyWhereUniqueInput | StudyWhereUniqueInput[]
    delete?: StudyWhereUniqueInput | StudyWhereUniqueInput[]
    connect?: StudyWhereUniqueInput | StudyWhereUniqueInput[]
    update?: StudyUpdateWithWhereUniqueWithoutPersonInput | StudyUpdateWithWhereUniqueWithoutPersonInput[]
    updateMany?: StudyUpdateManyWithWhereWithoutPersonInput | StudyUpdateManyWithWhereWithoutPersonInput[]
    deleteMany?: StudyScalarWhereInput | StudyScalarWhereInput[]
  }

  export type WorkExperienceUncheckedUpdateManyWithoutPersonNestedInput = {
    create?: XOR<WorkExperienceCreateWithoutPersonInput, WorkExperienceUncheckedCreateWithoutPersonInput> | WorkExperienceCreateWithoutPersonInput[] | WorkExperienceUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: WorkExperienceCreateOrConnectWithoutPersonInput | WorkExperienceCreateOrConnectWithoutPersonInput[]
    upsert?: WorkExperienceUpsertWithWhereUniqueWithoutPersonInput | WorkExperienceUpsertWithWhereUniqueWithoutPersonInput[]
    createMany?: WorkExperienceCreateManyPersonInputEnvelope
    set?: WorkExperienceWhereUniqueInput | WorkExperienceWhereUniqueInput[]
    disconnect?: WorkExperienceWhereUniqueInput | WorkExperienceWhereUniqueInput[]
    delete?: WorkExperienceWhereUniqueInput | WorkExperienceWhereUniqueInput[]
    connect?: WorkExperienceWhereUniqueInput | WorkExperienceWhereUniqueInput[]
    update?: WorkExperienceUpdateWithWhereUniqueWithoutPersonInput | WorkExperienceUpdateWithWhereUniqueWithoutPersonInput[]
    updateMany?: WorkExperienceUpdateManyWithWhereWithoutPersonInput | WorkExperienceUpdateManyWithWhereWithoutPersonInput[]
    deleteMany?: WorkExperienceScalarWhereInput | WorkExperienceScalarWhereInput[]
  }

  export type PersonCreateNestedOneWithoutLanguagesInput = {
    create?: XOR<PersonCreateWithoutLanguagesInput, PersonUncheckedCreateWithoutLanguagesInput>
    connectOrCreate?: PersonCreateOrConnectWithoutLanguagesInput
    connect?: PersonWhereUniqueInput
  }

  export type PersonUpdateOneRequiredWithoutLanguagesNestedInput = {
    create?: XOR<PersonCreateWithoutLanguagesInput, PersonUncheckedCreateWithoutLanguagesInput>
    connectOrCreate?: PersonCreateOrConnectWithoutLanguagesInput
    upsert?: PersonUpsertWithoutLanguagesInput
    connect?: PersonWhereUniqueInput
    update?: XOR<XOR<PersonUpdateToOneWithWhereWithoutLanguagesInput, PersonUpdateWithoutLanguagesInput>, PersonUncheckedUpdateWithoutLanguagesInput>
  }

  export type PersonCreateNestedOneWithoutReferencesInput = {
    create?: XOR<PersonCreateWithoutReferencesInput, PersonUncheckedCreateWithoutReferencesInput>
    connectOrCreate?: PersonCreateOrConnectWithoutReferencesInput
    connect?: PersonWhereUniqueInput
  }

  export type PersonUpdateOneRequiredWithoutReferencesNestedInput = {
    create?: XOR<PersonCreateWithoutReferencesInput, PersonUncheckedCreateWithoutReferencesInput>
    connectOrCreate?: PersonCreateOrConnectWithoutReferencesInput
    upsert?: PersonUpsertWithoutReferencesInput
    connect?: PersonWhereUniqueInput
    update?: XOR<XOR<PersonUpdateToOneWithWhereWithoutReferencesInput, PersonUpdateWithoutReferencesInput>, PersonUncheckedUpdateWithoutReferencesInput>
  }

  export type PersonCreateNestedOneWithoutStudiesInput = {
    create?: XOR<PersonCreateWithoutStudiesInput, PersonUncheckedCreateWithoutStudiesInput>
    connectOrCreate?: PersonCreateOrConnectWithoutStudiesInput
    connect?: PersonWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type PersonUpdateOneRequiredWithoutStudiesNestedInput = {
    create?: XOR<PersonCreateWithoutStudiesInput, PersonUncheckedCreateWithoutStudiesInput>
    connectOrCreate?: PersonCreateOrConnectWithoutStudiesInput
    upsert?: PersonUpsertWithoutStudiesInput
    connect?: PersonWhereUniqueInput
    update?: XOR<XOR<PersonUpdateToOneWithWhereWithoutStudiesInput, PersonUpdateWithoutStudiesInput>, PersonUncheckedUpdateWithoutStudiesInput>
  }

  export type WorkExperienceCreateskillsInput = {
    set: string[]
  }

  export type PersonCreateNestedOneWithoutWorkExperiencesInput = {
    create?: XOR<PersonCreateWithoutWorkExperiencesInput, PersonUncheckedCreateWithoutWorkExperiencesInput>
    connectOrCreate?: PersonCreateOrConnectWithoutWorkExperiencesInput
    connect?: PersonWhereUniqueInput
  }

  export type WorkExperienceUpdateskillsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type PersonUpdateOneRequiredWithoutWorkExperiencesNestedInput = {
    create?: XOR<PersonCreateWithoutWorkExperiencesInput, PersonUncheckedCreateWithoutWorkExperiencesInput>
    connectOrCreate?: PersonCreateOrConnectWithoutWorkExperiencesInput
    upsert?: PersonUpsertWithoutWorkExperiencesInput
    connect?: PersonWhereUniqueInput
    update?: XOR<XOR<PersonUpdateToOneWithWhereWithoutWorkExperiencesInput, PersonUpdateWithoutWorkExperiencesInput>, PersonUncheckedUpdateWithoutWorkExperiencesInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type LanguageCreateWithoutPersonInput = {
    languageName: string
    spokenLevel: number
    readLevel: number
    writtenLevel: number
  }

  export type LanguageUncheckedCreateWithoutPersonInput = {
    id?: number
    languageName: string
    spokenLevel: number
    readLevel: number
    writtenLevel: number
  }

  export type LanguageCreateOrConnectWithoutPersonInput = {
    where: LanguageWhereUniqueInput
    create: XOR<LanguageCreateWithoutPersonInput, LanguageUncheckedCreateWithoutPersonInput>
  }

  export type LanguageCreateManyPersonInputEnvelope = {
    data: LanguageCreateManyPersonInput | LanguageCreateManyPersonInput[]
    skipDuplicates?: boolean
  }

  export type ReferenceCreateWithoutPersonInput = {
    referenceName: string
    referenceSurname: string
    referencePhone: string
    referenceCompany?: string | null
    referenceRole?: string | null
    referenceType: string
  }

  export type ReferenceUncheckedCreateWithoutPersonInput = {
    id?: number
    referenceName: string
    referenceSurname: string
    referencePhone: string
    referenceCompany?: string | null
    referenceRole?: string | null
    referenceType: string
  }

  export type ReferenceCreateOrConnectWithoutPersonInput = {
    where: ReferenceWhereUniqueInput
    create: XOR<ReferenceCreateWithoutPersonInput, ReferenceUncheckedCreateWithoutPersonInput>
  }

  export type ReferenceCreateManyPersonInputEnvelope = {
    data: ReferenceCreateManyPersonInput | ReferenceCreateManyPersonInput[]
    skipDuplicates?: boolean
  }

  export type StudyCreateWithoutPersonInput = {
    level: string
    title: string
    institute: string
    fieldOfStudy: string
    startStudyDate: Date | string
    currentlyStudying?: boolean | null
    studySitutation?: string | null
    cityStudy?: string | null
    countyStudy?: string | null
    endStudyDate?: Date | string | null
  }

  export type StudyUncheckedCreateWithoutPersonInput = {
    id?: number
    level: string
    title: string
    institute: string
    fieldOfStudy: string
    startStudyDate: Date | string
    currentlyStudying?: boolean | null
    studySitutation?: string | null
    cityStudy?: string | null
    countyStudy?: string | null
    endStudyDate?: Date | string | null
  }

  export type StudyCreateOrConnectWithoutPersonInput = {
    where: StudyWhereUniqueInput
    create: XOR<StudyCreateWithoutPersonInput, StudyUncheckedCreateWithoutPersonInput>
  }

  export type StudyCreateManyPersonInputEnvelope = {
    data: StudyCreateManyPersonInput | StudyCreateManyPersonInput[]
    skipDuplicates?: boolean
  }

  export type WorkExperienceCreateWithoutPersonInput = {
    role: string
    company: string
    workField: string
    positionLevel?: string | null
    peopleInCharge?: string | null
    currentlyWorking?: boolean | null
    endWorkDate?: Date | string | null
    salary?: string | null
    skills?: WorkExperienceCreateskillsInput | string[]
    startWorkDate: Date | string
    task?: string | null
  }

  export type WorkExperienceUncheckedCreateWithoutPersonInput = {
    id?: number
    role: string
    company: string
    workField: string
    positionLevel?: string | null
    peopleInCharge?: string | null
    currentlyWorking?: boolean | null
    endWorkDate?: Date | string | null
    salary?: string | null
    skills?: WorkExperienceCreateskillsInput | string[]
    startWorkDate: Date | string
    task?: string | null
  }

  export type WorkExperienceCreateOrConnectWithoutPersonInput = {
    where: WorkExperienceWhereUniqueInput
    create: XOR<WorkExperienceCreateWithoutPersonInput, WorkExperienceUncheckedCreateWithoutPersonInput>
  }

  export type WorkExperienceCreateManyPersonInputEnvelope = {
    data: WorkExperienceCreateManyPersonInput | WorkExperienceCreateManyPersonInput[]
    skipDuplicates?: boolean
  }

  export type LanguageUpsertWithWhereUniqueWithoutPersonInput = {
    where: LanguageWhereUniqueInput
    update: XOR<LanguageUpdateWithoutPersonInput, LanguageUncheckedUpdateWithoutPersonInput>
    create: XOR<LanguageCreateWithoutPersonInput, LanguageUncheckedCreateWithoutPersonInput>
  }

  export type LanguageUpdateWithWhereUniqueWithoutPersonInput = {
    where: LanguageWhereUniqueInput
    data: XOR<LanguageUpdateWithoutPersonInput, LanguageUncheckedUpdateWithoutPersonInput>
  }

  export type LanguageUpdateManyWithWhereWithoutPersonInput = {
    where: LanguageScalarWhereInput
    data: XOR<LanguageUpdateManyMutationInput, LanguageUncheckedUpdateManyWithoutPersonInput>
  }

  export type LanguageScalarWhereInput = {
    AND?: LanguageScalarWhereInput | LanguageScalarWhereInput[]
    OR?: LanguageScalarWhereInput[]
    NOT?: LanguageScalarWhereInput | LanguageScalarWhereInput[]
    id?: IntFilter<"Language"> | number
    languageName?: StringFilter<"Language"> | string
    spokenLevel?: IntFilter<"Language"> | number
    readLevel?: IntFilter<"Language"> | number
    writtenLevel?: IntFilter<"Language"> | number
    personId?: IntFilter<"Language"> | number
  }

  export type ReferenceUpsertWithWhereUniqueWithoutPersonInput = {
    where: ReferenceWhereUniqueInput
    update: XOR<ReferenceUpdateWithoutPersonInput, ReferenceUncheckedUpdateWithoutPersonInput>
    create: XOR<ReferenceCreateWithoutPersonInput, ReferenceUncheckedCreateWithoutPersonInput>
  }

  export type ReferenceUpdateWithWhereUniqueWithoutPersonInput = {
    where: ReferenceWhereUniqueInput
    data: XOR<ReferenceUpdateWithoutPersonInput, ReferenceUncheckedUpdateWithoutPersonInput>
  }

  export type ReferenceUpdateManyWithWhereWithoutPersonInput = {
    where: ReferenceScalarWhereInput
    data: XOR<ReferenceUpdateManyMutationInput, ReferenceUncheckedUpdateManyWithoutPersonInput>
  }

  export type ReferenceScalarWhereInput = {
    AND?: ReferenceScalarWhereInput | ReferenceScalarWhereInput[]
    OR?: ReferenceScalarWhereInput[]
    NOT?: ReferenceScalarWhereInput | ReferenceScalarWhereInput[]
    id?: IntFilter<"Reference"> | number
    referenceName?: StringFilter<"Reference"> | string
    referenceSurname?: StringFilter<"Reference"> | string
    referencePhone?: StringFilter<"Reference"> | string
    referenceCompany?: StringNullableFilter<"Reference"> | string | null
    personId?: IntFilter<"Reference"> | number
    referenceRole?: StringNullableFilter<"Reference"> | string | null
    referenceType?: StringFilter<"Reference"> | string
  }

  export type StudyUpsertWithWhereUniqueWithoutPersonInput = {
    where: StudyWhereUniqueInput
    update: XOR<StudyUpdateWithoutPersonInput, StudyUncheckedUpdateWithoutPersonInput>
    create: XOR<StudyCreateWithoutPersonInput, StudyUncheckedCreateWithoutPersonInput>
  }

  export type StudyUpdateWithWhereUniqueWithoutPersonInput = {
    where: StudyWhereUniqueInput
    data: XOR<StudyUpdateWithoutPersonInput, StudyUncheckedUpdateWithoutPersonInput>
  }

  export type StudyUpdateManyWithWhereWithoutPersonInput = {
    where: StudyScalarWhereInput
    data: XOR<StudyUpdateManyMutationInput, StudyUncheckedUpdateManyWithoutPersonInput>
  }

  export type StudyScalarWhereInput = {
    AND?: StudyScalarWhereInput | StudyScalarWhereInput[]
    OR?: StudyScalarWhereInput[]
    NOT?: StudyScalarWhereInput | StudyScalarWhereInput[]
    id?: IntFilter<"Study"> | number
    level?: StringFilter<"Study"> | string
    title?: StringFilter<"Study"> | string
    institute?: StringFilter<"Study"> | string
    fieldOfStudy?: StringFilter<"Study"> | string
    startStudyDate?: DateTimeFilter<"Study"> | Date | string
    personId?: IntFilter<"Study"> | number
    currentlyStudying?: BoolNullableFilter<"Study"> | boolean | null
    studySitutation?: StringNullableFilter<"Study"> | string | null
    cityStudy?: StringNullableFilter<"Study"> | string | null
    countyStudy?: StringNullableFilter<"Study"> | string | null
    endStudyDate?: DateTimeNullableFilter<"Study"> | Date | string | null
  }

  export type WorkExperienceUpsertWithWhereUniqueWithoutPersonInput = {
    where: WorkExperienceWhereUniqueInput
    update: XOR<WorkExperienceUpdateWithoutPersonInput, WorkExperienceUncheckedUpdateWithoutPersonInput>
    create: XOR<WorkExperienceCreateWithoutPersonInput, WorkExperienceUncheckedCreateWithoutPersonInput>
  }

  export type WorkExperienceUpdateWithWhereUniqueWithoutPersonInput = {
    where: WorkExperienceWhereUniqueInput
    data: XOR<WorkExperienceUpdateWithoutPersonInput, WorkExperienceUncheckedUpdateWithoutPersonInput>
  }

  export type WorkExperienceUpdateManyWithWhereWithoutPersonInput = {
    where: WorkExperienceScalarWhereInput
    data: XOR<WorkExperienceUpdateManyMutationInput, WorkExperienceUncheckedUpdateManyWithoutPersonInput>
  }

  export type WorkExperienceScalarWhereInput = {
    AND?: WorkExperienceScalarWhereInput | WorkExperienceScalarWhereInput[]
    OR?: WorkExperienceScalarWhereInput[]
    NOT?: WorkExperienceScalarWhereInput | WorkExperienceScalarWhereInput[]
    id?: IntFilter<"WorkExperience"> | number
    role?: StringFilter<"WorkExperience"> | string
    company?: StringFilter<"WorkExperience"> | string
    workField?: StringFilter<"WorkExperience"> | string
    positionLevel?: StringNullableFilter<"WorkExperience"> | string | null
    peopleInCharge?: StringNullableFilter<"WorkExperience"> | string | null
    personId?: IntFilter<"WorkExperience"> | number
    currentlyWorking?: BoolNullableFilter<"WorkExperience"> | boolean | null
    endWorkDate?: DateTimeNullableFilter<"WorkExperience"> | Date | string | null
    salary?: StringNullableFilter<"WorkExperience"> | string | null
    skills?: StringNullableListFilter<"WorkExperience">
    startWorkDate?: DateTimeFilter<"WorkExperience"> | Date | string
    task?: StringNullableFilter<"WorkExperience"> | string | null
  }

  export type PersonCreateWithoutLanguagesInput = {
    dni: string
    dniNumber: string
    birthday: Date | string
    name: string
    surname: string
    about: string
    address: string
    cp?: string | null
    email: string
    phone: string
    cityPD?: string | null
    countyPD?: string | null
    gender?: string | null
    liveAbroad?: boolean | null
    currentCountry?: string | null
    currentCity?: string | null
    references?: ReferenceCreateNestedManyWithoutPersonInput
    studies?: StudyCreateNestedManyWithoutPersonInput
    workExperiences?: WorkExperienceCreateNestedManyWithoutPersonInput
  }

  export type PersonUncheckedCreateWithoutLanguagesInput = {
    id?: number
    dni: string
    dniNumber: string
    birthday: Date | string
    name: string
    surname: string
    about: string
    address: string
    cp?: string | null
    email: string
    phone: string
    cityPD?: string | null
    countyPD?: string | null
    gender?: string | null
    liveAbroad?: boolean | null
    currentCountry?: string | null
    currentCity?: string | null
    references?: ReferenceUncheckedCreateNestedManyWithoutPersonInput
    studies?: StudyUncheckedCreateNestedManyWithoutPersonInput
    workExperiences?: WorkExperienceUncheckedCreateNestedManyWithoutPersonInput
  }

  export type PersonCreateOrConnectWithoutLanguagesInput = {
    where: PersonWhereUniqueInput
    create: XOR<PersonCreateWithoutLanguagesInput, PersonUncheckedCreateWithoutLanguagesInput>
  }

  export type PersonUpsertWithoutLanguagesInput = {
    update: XOR<PersonUpdateWithoutLanguagesInput, PersonUncheckedUpdateWithoutLanguagesInput>
    create: XOR<PersonCreateWithoutLanguagesInput, PersonUncheckedCreateWithoutLanguagesInput>
    where?: PersonWhereInput
  }

  export type PersonUpdateToOneWithWhereWithoutLanguagesInput = {
    where?: PersonWhereInput
    data: XOR<PersonUpdateWithoutLanguagesInput, PersonUncheckedUpdateWithoutLanguagesInput>
  }

  export type PersonUpdateWithoutLanguagesInput = {
    dni?: StringFieldUpdateOperationsInput | string
    dniNumber?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    cp?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    cityPD?: NullableStringFieldUpdateOperationsInput | string | null
    countyPD?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    liveAbroad?: NullableBoolFieldUpdateOperationsInput | boolean | null
    currentCountry?: NullableStringFieldUpdateOperationsInput | string | null
    currentCity?: NullableStringFieldUpdateOperationsInput | string | null
    references?: ReferenceUpdateManyWithoutPersonNestedInput
    studies?: StudyUpdateManyWithoutPersonNestedInput
    workExperiences?: WorkExperienceUpdateManyWithoutPersonNestedInput
  }

  export type PersonUncheckedUpdateWithoutLanguagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    dni?: StringFieldUpdateOperationsInput | string
    dniNumber?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    cp?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    cityPD?: NullableStringFieldUpdateOperationsInput | string | null
    countyPD?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    liveAbroad?: NullableBoolFieldUpdateOperationsInput | boolean | null
    currentCountry?: NullableStringFieldUpdateOperationsInput | string | null
    currentCity?: NullableStringFieldUpdateOperationsInput | string | null
    references?: ReferenceUncheckedUpdateManyWithoutPersonNestedInput
    studies?: StudyUncheckedUpdateManyWithoutPersonNestedInput
    workExperiences?: WorkExperienceUncheckedUpdateManyWithoutPersonNestedInput
  }

  export type PersonCreateWithoutReferencesInput = {
    dni: string
    dniNumber: string
    birthday: Date | string
    name: string
    surname: string
    about: string
    address: string
    cp?: string | null
    email: string
    phone: string
    cityPD?: string | null
    countyPD?: string | null
    gender?: string | null
    liveAbroad?: boolean | null
    currentCountry?: string | null
    currentCity?: string | null
    languages?: LanguageCreateNestedManyWithoutPersonInput
    studies?: StudyCreateNestedManyWithoutPersonInput
    workExperiences?: WorkExperienceCreateNestedManyWithoutPersonInput
  }

  export type PersonUncheckedCreateWithoutReferencesInput = {
    id?: number
    dni: string
    dniNumber: string
    birthday: Date | string
    name: string
    surname: string
    about: string
    address: string
    cp?: string | null
    email: string
    phone: string
    cityPD?: string | null
    countyPD?: string | null
    gender?: string | null
    liveAbroad?: boolean | null
    currentCountry?: string | null
    currentCity?: string | null
    languages?: LanguageUncheckedCreateNestedManyWithoutPersonInput
    studies?: StudyUncheckedCreateNestedManyWithoutPersonInput
    workExperiences?: WorkExperienceUncheckedCreateNestedManyWithoutPersonInput
  }

  export type PersonCreateOrConnectWithoutReferencesInput = {
    where: PersonWhereUniqueInput
    create: XOR<PersonCreateWithoutReferencesInput, PersonUncheckedCreateWithoutReferencesInput>
  }

  export type PersonUpsertWithoutReferencesInput = {
    update: XOR<PersonUpdateWithoutReferencesInput, PersonUncheckedUpdateWithoutReferencesInput>
    create: XOR<PersonCreateWithoutReferencesInput, PersonUncheckedCreateWithoutReferencesInput>
    where?: PersonWhereInput
  }

  export type PersonUpdateToOneWithWhereWithoutReferencesInput = {
    where?: PersonWhereInput
    data: XOR<PersonUpdateWithoutReferencesInput, PersonUncheckedUpdateWithoutReferencesInput>
  }

  export type PersonUpdateWithoutReferencesInput = {
    dni?: StringFieldUpdateOperationsInput | string
    dniNumber?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    cp?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    cityPD?: NullableStringFieldUpdateOperationsInput | string | null
    countyPD?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    liveAbroad?: NullableBoolFieldUpdateOperationsInput | boolean | null
    currentCountry?: NullableStringFieldUpdateOperationsInput | string | null
    currentCity?: NullableStringFieldUpdateOperationsInput | string | null
    languages?: LanguageUpdateManyWithoutPersonNestedInput
    studies?: StudyUpdateManyWithoutPersonNestedInput
    workExperiences?: WorkExperienceUpdateManyWithoutPersonNestedInput
  }

  export type PersonUncheckedUpdateWithoutReferencesInput = {
    id?: IntFieldUpdateOperationsInput | number
    dni?: StringFieldUpdateOperationsInput | string
    dniNumber?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    cp?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    cityPD?: NullableStringFieldUpdateOperationsInput | string | null
    countyPD?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    liveAbroad?: NullableBoolFieldUpdateOperationsInput | boolean | null
    currentCountry?: NullableStringFieldUpdateOperationsInput | string | null
    currentCity?: NullableStringFieldUpdateOperationsInput | string | null
    languages?: LanguageUncheckedUpdateManyWithoutPersonNestedInput
    studies?: StudyUncheckedUpdateManyWithoutPersonNestedInput
    workExperiences?: WorkExperienceUncheckedUpdateManyWithoutPersonNestedInput
  }

  export type PersonCreateWithoutStudiesInput = {
    dni: string
    dniNumber: string
    birthday: Date | string
    name: string
    surname: string
    about: string
    address: string
    cp?: string | null
    email: string
    phone: string
    cityPD?: string | null
    countyPD?: string | null
    gender?: string | null
    liveAbroad?: boolean | null
    currentCountry?: string | null
    currentCity?: string | null
    languages?: LanguageCreateNestedManyWithoutPersonInput
    references?: ReferenceCreateNestedManyWithoutPersonInput
    workExperiences?: WorkExperienceCreateNestedManyWithoutPersonInput
  }

  export type PersonUncheckedCreateWithoutStudiesInput = {
    id?: number
    dni: string
    dniNumber: string
    birthday: Date | string
    name: string
    surname: string
    about: string
    address: string
    cp?: string | null
    email: string
    phone: string
    cityPD?: string | null
    countyPD?: string | null
    gender?: string | null
    liveAbroad?: boolean | null
    currentCountry?: string | null
    currentCity?: string | null
    languages?: LanguageUncheckedCreateNestedManyWithoutPersonInput
    references?: ReferenceUncheckedCreateNestedManyWithoutPersonInput
    workExperiences?: WorkExperienceUncheckedCreateNestedManyWithoutPersonInput
  }

  export type PersonCreateOrConnectWithoutStudiesInput = {
    where: PersonWhereUniqueInput
    create: XOR<PersonCreateWithoutStudiesInput, PersonUncheckedCreateWithoutStudiesInput>
  }

  export type PersonUpsertWithoutStudiesInput = {
    update: XOR<PersonUpdateWithoutStudiesInput, PersonUncheckedUpdateWithoutStudiesInput>
    create: XOR<PersonCreateWithoutStudiesInput, PersonUncheckedCreateWithoutStudiesInput>
    where?: PersonWhereInput
  }

  export type PersonUpdateToOneWithWhereWithoutStudiesInput = {
    where?: PersonWhereInput
    data: XOR<PersonUpdateWithoutStudiesInput, PersonUncheckedUpdateWithoutStudiesInput>
  }

  export type PersonUpdateWithoutStudiesInput = {
    dni?: StringFieldUpdateOperationsInput | string
    dniNumber?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    cp?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    cityPD?: NullableStringFieldUpdateOperationsInput | string | null
    countyPD?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    liveAbroad?: NullableBoolFieldUpdateOperationsInput | boolean | null
    currentCountry?: NullableStringFieldUpdateOperationsInput | string | null
    currentCity?: NullableStringFieldUpdateOperationsInput | string | null
    languages?: LanguageUpdateManyWithoutPersonNestedInput
    references?: ReferenceUpdateManyWithoutPersonNestedInput
    workExperiences?: WorkExperienceUpdateManyWithoutPersonNestedInput
  }

  export type PersonUncheckedUpdateWithoutStudiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    dni?: StringFieldUpdateOperationsInput | string
    dniNumber?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    cp?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    cityPD?: NullableStringFieldUpdateOperationsInput | string | null
    countyPD?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    liveAbroad?: NullableBoolFieldUpdateOperationsInput | boolean | null
    currentCountry?: NullableStringFieldUpdateOperationsInput | string | null
    currentCity?: NullableStringFieldUpdateOperationsInput | string | null
    languages?: LanguageUncheckedUpdateManyWithoutPersonNestedInput
    references?: ReferenceUncheckedUpdateManyWithoutPersonNestedInput
    workExperiences?: WorkExperienceUncheckedUpdateManyWithoutPersonNestedInput
  }

  export type PersonCreateWithoutWorkExperiencesInput = {
    dni: string
    dniNumber: string
    birthday: Date | string
    name: string
    surname: string
    about: string
    address: string
    cp?: string | null
    email: string
    phone: string
    cityPD?: string | null
    countyPD?: string | null
    gender?: string | null
    liveAbroad?: boolean | null
    currentCountry?: string | null
    currentCity?: string | null
    languages?: LanguageCreateNestedManyWithoutPersonInput
    references?: ReferenceCreateNestedManyWithoutPersonInput
    studies?: StudyCreateNestedManyWithoutPersonInput
  }

  export type PersonUncheckedCreateWithoutWorkExperiencesInput = {
    id?: number
    dni: string
    dniNumber: string
    birthday: Date | string
    name: string
    surname: string
    about: string
    address: string
    cp?: string | null
    email: string
    phone: string
    cityPD?: string | null
    countyPD?: string | null
    gender?: string | null
    liveAbroad?: boolean | null
    currentCountry?: string | null
    currentCity?: string | null
    languages?: LanguageUncheckedCreateNestedManyWithoutPersonInput
    references?: ReferenceUncheckedCreateNestedManyWithoutPersonInput
    studies?: StudyUncheckedCreateNestedManyWithoutPersonInput
  }

  export type PersonCreateOrConnectWithoutWorkExperiencesInput = {
    where: PersonWhereUniqueInput
    create: XOR<PersonCreateWithoutWorkExperiencesInput, PersonUncheckedCreateWithoutWorkExperiencesInput>
  }

  export type PersonUpsertWithoutWorkExperiencesInput = {
    update: XOR<PersonUpdateWithoutWorkExperiencesInput, PersonUncheckedUpdateWithoutWorkExperiencesInput>
    create: XOR<PersonCreateWithoutWorkExperiencesInput, PersonUncheckedCreateWithoutWorkExperiencesInput>
    where?: PersonWhereInput
  }

  export type PersonUpdateToOneWithWhereWithoutWorkExperiencesInput = {
    where?: PersonWhereInput
    data: XOR<PersonUpdateWithoutWorkExperiencesInput, PersonUncheckedUpdateWithoutWorkExperiencesInput>
  }

  export type PersonUpdateWithoutWorkExperiencesInput = {
    dni?: StringFieldUpdateOperationsInput | string
    dniNumber?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    cp?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    cityPD?: NullableStringFieldUpdateOperationsInput | string | null
    countyPD?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    liveAbroad?: NullableBoolFieldUpdateOperationsInput | boolean | null
    currentCountry?: NullableStringFieldUpdateOperationsInput | string | null
    currentCity?: NullableStringFieldUpdateOperationsInput | string | null
    languages?: LanguageUpdateManyWithoutPersonNestedInput
    references?: ReferenceUpdateManyWithoutPersonNestedInput
    studies?: StudyUpdateManyWithoutPersonNestedInput
  }

  export type PersonUncheckedUpdateWithoutWorkExperiencesInput = {
    id?: IntFieldUpdateOperationsInput | number
    dni?: StringFieldUpdateOperationsInput | string
    dniNumber?: StringFieldUpdateOperationsInput | string
    birthday?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    about?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    cp?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    cityPD?: NullableStringFieldUpdateOperationsInput | string | null
    countyPD?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    liveAbroad?: NullableBoolFieldUpdateOperationsInput | boolean | null
    currentCountry?: NullableStringFieldUpdateOperationsInput | string | null
    currentCity?: NullableStringFieldUpdateOperationsInput | string | null
    languages?: LanguageUncheckedUpdateManyWithoutPersonNestedInput
    references?: ReferenceUncheckedUpdateManyWithoutPersonNestedInput
    studies?: StudyUncheckedUpdateManyWithoutPersonNestedInput
  }

  export type LanguageCreateManyPersonInput = {
    id?: number
    languageName: string
    spokenLevel: number
    readLevel: number
    writtenLevel: number
  }

  export type ReferenceCreateManyPersonInput = {
    id?: number
    referenceName: string
    referenceSurname: string
    referencePhone: string
    referenceCompany?: string | null
    referenceRole?: string | null
    referenceType: string
  }

  export type StudyCreateManyPersonInput = {
    id?: number
    level: string
    title: string
    institute: string
    fieldOfStudy: string
    startStudyDate: Date | string
    currentlyStudying?: boolean | null
    studySitutation?: string | null
    cityStudy?: string | null
    countyStudy?: string | null
    endStudyDate?: Date | string | null
  }

  export type WorkExperienceCreateManyPersonInput = {
    id?: number
    role: string
    company: string
    workField: string
    positionLevel?: string | null
    peopleInCharge?: string | null
    currentlyWorking?: boolean | null
    endWorkDate?: Date | string | null
    salary?: string | null
    skills?: WorkExperienceCreateskillsInput | string[]
    startWorkDate: Date | string
    task?: string | null
  }

  export type LanguageUpdateWithoutPersonInput = {
    languageName?: StringFieldUpdateOperationsInput | string
    spokenLevel?: IntFieldUpdateOperationsInput | number
    readLevel?: IntFieldUpdateOperationsInput | number
    writtenLevel?: IntFieldUpdateOperationsInput | number
  }

  export type LanguageUncheckedUpdateWithoutPersonInput = {
    id?: IntFieldUpdateOperationsInput | number
    languageName?: StringFieldUpdateOperationsInput | string
    spokenLevel?: IntFieldUpdateOperationsInput | number
    readLevel?: IntFieldUpdateOperationsInput | number
    writtenLevel?: IntFieldUpdateOperationsInput | number
  }

  export type LanguageUncheckedUpdateManyWithoutPersonInput = {
    id?: IntFieldUpdateOperationsInput | number
    languageName?: StringFieldUpdateOperationsInput | string
    spokenLevel?: IntFieldUpdateOperationsInput | number
    readLevel?: IntFieldUpdateOperationsInput | number
    writtenLevel?: IntFieldUpdateOperationsInput | number
  }

  export type ReferenceUpdateWithoutPersonInput = {
    referenceName?: StringFieldUpdateOperationsInput | string
    referenceSurname?: StringFieldUpdateOperationsInput | string
    referencePhone?: StringFieldUpdateOperationsInput | string
    referenceCompany?: NullableStringFieldUpdateOperationsInput | string | null
    referenceRole?: NullableStringFieldUpdateOperationsInput | string | null
    referenceType?: StringFieldUpdateOperationsInput | string
  }

  export type ReferenceUncheckedUpdateWithoutPersonInput = {
    id?: IntFieldUpdateOperationsInput | number
    referenceName?: StringFieldUpdateOperationsInput | string
    referenceSurname?: StringFieldUpdateOperationsInput | string
    referencePhone?: StringFieldUpdateOperationsInput | string
    referenceCompany?: NullableStringFieldUpdateOperationsInput | string | null
    referenceRole?: NullableStringFieldUpdateOperationsInput | string | null
    referenceType?: StringFieldUpdateOperationsInput | string
  }

  export type ReferenceUncheckedUpdateManyWithoutPersonInput = {
    id?: IntFieldUpdateOperationsInput | number
    referenceName?: StringFieldUpdateOperationsInput | string
    referenceSurname?: StringFieldUpdateOperationsInput | string
    referencePhone?: StringFieldUpdateOperationsInput | string
    referenceCompany?: NullableStringFieldUpdateOperationsInput | string | null
    referenceRole?: NullableStringFieldUpdateOperationsInput | string | null
    referenceType?: StringFieldUpdateOperationsInput | string
  }

  export type StudyUpdateWithoutPersonInput = {
    level?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    institute?: StringFieldUpdateOperationsInput | string
    fieldOfStudy?: StringFieldUpdateOperationsInput | string
    startStudyDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currentlyStudying?: NullableBoolFieldUpdateOperationsInput | boolean | null
    studySitutation?: NullableStringFieldUpdateOperationsInput | string | null
    cityStudy?: NullableStringFieldUpdateOperationsInput | string | null
    countyStudy?: NullableStringFieldUpdateOperationsInput | string | null
    endStudyDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StudyUncheckedUpdateWithoutPersonInput = {
    id?: IntFieldUpdateOperationsInput | number
    level?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    institute?: StringFieldUpdateOperationsInput | string
    fieldOfStudy?: StringFieldUpdateOperationsInput | string
    startStudyDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currentlyStudying?: NullableBoolFieldUpdateOperationsInput | boolean | null
    studySitutation?: NullableStringFieldUpdateOperationsInput | string | null
    cityStudy?: NullableStringFieldUpdateOperationsInput | string | null
    countyStudy?: NullableStringFieldUpdateOperationsInput | string | null
    endStudyDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StudyUncheckedUpdateManyWithoutPersonInput = {
    id?: IntFieldUpdateOperationsInput | number
    level?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    institute?: StringFieldUpdateOperationsInput | string
    fieldOfStudy?: StringFieldUpdateOperationsInput | string
    startStudyDate?: DateTimeFieldUpdateOperationsInput | Date | string
    currentlyStudying?: NullableBoolFieldUpdateOperationsInput | boolean | null
    studySitutation?: NullableStringFieldUpdateOperationsInput | string | null
    cityStudy?: NullableStringFieldUpdateOperationsInput | string | null
    countyStudy?: NullableStringFieldUpdateOperationsInput | string | null
    endStudyDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type WorkExperienceUpdateWithoutPersonInput = {
    role?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    workField?: StringFieldUpdateOperationsInput | string
    positionLevel?: NullableStringFieldUpdateOperationsInput | string | null
    peopleInCharge?: NullableStringFieldUpdateOperationsInput | string | null
    currentlyWorking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    endWorkDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableStringFieldUpdateOperationsInput | string | null
    skills?: WorkExperienceUpdateskillsInput | string[]
    startWorkDate?: DateTimeFieldUpdateOperationsInput | Date | string
    task?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WorkExperienceUncheckedUpdateWithoutPersonInput = {
    id?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    workField?: StringFieldUpdateOperationsInput | string
    positionLevel?: NullableStringFieldUpdateOperationsInput | string | null
    peopleInCharge?: NullableStringFieldUpdateOperationsInput | string | null
    currentlyWorking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    endWorkDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableStringFieldUpdateOperationsInput | string | null
    skills?: WorkExperienceUpdateskillsInput | string[]
    startWorkDate?: DateTimeFieldUpdateOperationsInput | Date | string
    task?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WorkExperienceUncheckedUpdateManyWithoutPersonInput = {
    id?: IntFieldUpdateOperationsInput | number
    role?: StringFieldUpdateOperationsInput | string
    company?: StringFieldUpdateOperationsInput | string
    workField?: StringFieldUpdateOperationsInput | string
    positionLevel?: NullableStringFieldUpdateOperationsInput | string | null
    peopleInCharge?: NullableStringFieldUpdateOperationsInput | string | null
    currentlyWorking?: NullableBoolFieldUpdateOperationsInput | boolean | null
    endWorkDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    salary?: NullableStringFieldUpdateOperationsInput | string | null
    skills?: WorkExperienceUpdateskillsInput | string[]
    startWorkDate?: DateTimeFieldUpdateOperationsInput | Date | string
    task?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use PersonCountOutputTypeDefaultArgs instead
     */
    export type PersonCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PersonCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PersonDefaultArgs instead
     */
    export type PersonArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PersonDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LanguageDefaultArgs instead
     */
    export type LanguageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LanguageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReferenceDefaultArgs instead
     */
    export type ReferenceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReferenceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StudyDefaultArgs instead
     */
    export type StudyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StudyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WorkExperienceDefaultArgs instead
     */
    export type WorkExperienceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WorkExperienceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CompaniesDefaultArgs instead
     */
    export type CompaniesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CompaniesDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}